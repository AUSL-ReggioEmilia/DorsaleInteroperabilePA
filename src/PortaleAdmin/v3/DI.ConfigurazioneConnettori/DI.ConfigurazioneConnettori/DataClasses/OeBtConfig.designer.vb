'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="AuslAsmnRe_OeBtConfig")>  _
Partial Public Class OeBtConfigDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertTipoOperazioneOsu(instance As TipoOperazioneOsu)
    End Sub
  Partial Private Sub UpdateTipoOperazioneOsu(instance As TipoOperazioneOsu)
    End Sub
  Partial Private Sub DeleteTipoOperazioneOsu(instance As TipoOperazioneOsu)
    End Sub
  Partial Private Sub InsertTipoOperazioneOsuAziende(instance As TipoOperazioneOsuAziende)
    End Sub
  Partial Private Sub UpdateTipoOperazioneOsuAziende(instance As TipoOperazioneOsuAziende)
    End Sub
  Partial Private Sub DeleteTipoOperazioneOsuAziende(instance As TipoOperazioneOsuAziende)
    End Sub
  Partial Private Sub InsertTipoOperazioneOsuSistemi(instance As TipoOperazioneOsuSistemi)
    End Sub
  Partial Private Sub UpdateTipoOperazioneOsuSistemi(instance As TipoOperazioneOsuSistemi)
    End Sub
  Partial Private Sub DeleteTipoOperazioneOsuSistemi(instance As TipoOperazioneOsuSistemi)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("AuslAsmnRe_OeBtConfigConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property TipoOperazioneOsu() As System.Data.Linq.Table(Of TipoOperazioneOsu)
		Get
			Return Me.GetTable(Of TipoOperazioneOsu)
		End Get
	End Property
	
	Public ReadOnly Property TipoOperazioneOsuAziende() As System.Data.Linq.Table(Of TipoOperazioneOsuAziende)
		Get
			Return Me.GetTable(Of TipoOperazioneOsuAziende)
		End Get
	End Property
	
	Public ReadOnly Property TipoOperazioneOsuSistemi() As System.Data.Linq.Table(Of TipoOperazioneOsuSistemi)
		Get
			Return Me.GetTable(Of TipoOperazioneOsuSistemi)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TipoOperazioneOsu")>  _
Partial Public Class TipoOperazioneOsu
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Sistema As String
	
	Private _Azienda As String
	
	Private _TipoOperazione As String
	
	Private _TipoOperazioneOsuAziende As EntityRef(Of TipoOperazioneOsuAziende)
	
	Private _TipoOperazioneOsuSistemi As EntityRef(Of TipoOperazioneOsuSistemi)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSistemaChanging(value As String)
    End Sub
    Partial Private Sub OnSistemaChanged()
    End Sub
    Partial Private Sub OnAziendaChanging(value As String)
    End Sub
    Partial Private Sub OnAziendaChanged()
    End Sub
    Partial Private Sub OnTipoOperazioneChanging(value As String)
    End Sub
    Partial Private Sub OnTipoOperazioneChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TipoOperazioneOsuAziende = CType(Nothing, EntityRef(Of TipoOperazioneOsuAziende))
		Me._TipoOperazioneOsuSistemi = CType(Nothing, EntityRef(Of TipoOperazioneOsuSistemi))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sistema", DbType:="VarChar(16) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Sistema() As String
		Get
			Return Me._Sistema
		End Get
		Set
			If (String.Equals(Me._Sistema, value) = false) Then
				If Me._TipoOperazioneOsuSistemi.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSistemaChanging(value)
				Me.SendPropertyChanging
				Me._Sistema = value
				Me.SendPropertyChanged("Sistema")
				Me.OnSistemaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Azienda", DbType:="VarChar(16) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Azienda() As String
		Get
			Return Me._Azienda
		End Get
		Set
			If (String.Equals(Me._Azienda, value) = false) Then
				If Me._TipoOperazioneOsuAziende.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAziendaChanging(value)
				Me.SendPropertyChanging
				Me._Azienda = value
				Me.SendPropertyChanged("Azienda")
				Me.OnAziendaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoOperazione", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TipoOperazione() As String
		Get
			Return Me._TipoOperazione
		End Get
		Set
			If (String.Equals(Me._TipoOperazione, value) = false) Then
				Me.OnTipoOperazioneChanging(value)
				Me.SendPropertyChanging
				Me._TipoOperazione = value
				Me.SendPropertyChanged("TipoOperazione")
				Me.OnTipoOperazioneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoOperazioneOsuAziende_TipoOperazioneOsu", Storage:="_TipoOperazioneOsuAziende", ThisKey:="Azienda", OtherKey:="Azienda", IsForeignKey:=true)>  _
	Public Property TipoOperazioneOsuAziende() As TipoOperazioneOsuAziende
		Get
			Return Me._TipoOperazioneOsuAziende.Entity
		End Get
		Set
			Dim previousValue As TipoOperazioneOsuAziende = Me._TipoOperazioneOsuAziende.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TipoOperazioneOsuAziende.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TipoOperazioneOsuAziende.Entity = Nothing
					previousValue.TipoOperazioneOsu = Nothing
				End If
				Me._TipoOperazioneOsuAziende.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TipoOperazioneOsu = Me
					Me._Azienda = value.Azienda
				Else
					Me._Azienda = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("TipoOperazioneOsuAziende")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoOperazioneOsuSistemi_TipoOperazioneOsu", Storage:="_TipoOperazioneOsuSistemi", ThisKey:="Sistema", OtherKey:="Sistema", IsForeignKey:=true)>  _
	Public Property TipoOperazioneOsuSistemi() As TipoOperazioneOsuSistemi
		Get
			Return Me._TipoOperazioneOsuSistemi.Entity
		End Get
		Set
			Dim previousValue As TipoOperazioneOsuSistemi = Me._TipoOperazioneOsuSistemi.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TipoOperazioneOsuSistemi.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TipoOperazioneOsuSistemi.Entity = Nothing
					previousValue.TipoOperazioneOsu = Nothing
				End If
				Me._TipoOperazioneOsuSistemi.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TipoOperazioneOsu = Me
					Me._Sistema = value.Sistema
				Else
					Me._Sistema = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("TipoOperazioneOsuSistemi")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="admin.TipoOperazioneOsuAziende")>  _
Partial Public Class TipoOperazioneOsuAziende
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Azienda As String
	
	Private _TipoOperazioneOsu As EntityRef(Of TipoOperazioneOsu)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAziendaChanging(value As String)
    End Sub
    Partial Private Sub OnAziendaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TipoOperazioneOsu = CType(Nothing, EntityRef(Of TipoOperazioneOsu))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Azienda", DbType:="VarChar(16) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Azienda() As String
		Get
			Return Me._Azienda
		End Get
		Set
			If (String.Equals(Me._Azienda, value) = false) Then
				Me.OnAziendaChanging(value)
				Me.SendPropertyChanging
				Me._Azienda = value
				Me.SendPropertyChanged("Azienda")
				Me.OnAziendaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoOperazioneOsuAziende_TipoOperazioneOsu", Storage:="_TipoOperazioneOsu", ThisKey:="Azienda", OtherKey:="Azienda", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property TipoOperazioneOsu() As TipoOperazioneOsu
		Get
			Return Me._TipoOperazioneOsu.Entity
		End Get
		Set
			Dim previousValue As TipoOperazioneOsu = Me._TipoOperazioneOsu.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TipoOperazioneOsu.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TipoOperazioneOsu.Entity = Nothing
					previousValue.TipoOperazioneOsuAziende = Nothing
				End If
				Me._TipoOperazioneOsu.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.TipoOperazioneOsuAziende = Me
				End If
				Me.SendPropertyChanged("TipoOperazioneOsu")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="admin.TipoOperazioneOsuSistemi")>  _
Partial Public Class TipoOperazioneOsuSistemi
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Sistema As String
	
	Private _TipoOperazioneOsu As EntityRef(Of TipoOperazioneOsu)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSistemaChanging(value As String)
    End Sub
    Partial Private Sub OnSistemaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TipoOperazioneOsu = CType(Nothing, EntityRef(Of TipoOperazioneOsu))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sistema", DbType:="VarChar(16) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Sistema() As String
		Get
			Return Me._Sistema
		End Get
		Set
			If (String.Equals(Me._Sistema, value) = false) Then
				Me.OnSistemaChanging(value)
				Me.SendPropertyChanging
				Me._Sistema = value
				Me.SendPropertyChanged("Sistema")
				Me.OnSistemaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoOperazioneOsuSistemi_TipoOperazioneOsu", Storage:="_TipoOperazioneOsu", ThisKey:="Sistema", OtherKey:="Sistema", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property TipoOperazioneOsu() As TipoOperazioneOsu
		Get
			Return Me._TipoOperazioneOsu.Entity
		End Get
		Set
			Dim previousValue As TipoOperazioneOsu = Me._TipoOperazioneOsu.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TipoOperazioneOsu.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TipoOperazioneOsu.Entity = Nothing
					previousValue.TipoOperazioneOsuSistemi = Nothing
				End If
				Me._TipoOperazioneOsu.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.TipoOperazioneOsuSistemi = Me
				End If
				Me.SendPropertyChanged("TipoOperazioneOsu")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
