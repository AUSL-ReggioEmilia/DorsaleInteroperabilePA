'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Ausl_DwhOut_DSA")>  _
Partial Public Class DwhOutDsaDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertFiltriRepartiRichiedenti(instance As FiltriRepartiRichiedenti)
    End Sub
  Partial Private Sub UpdateFiltriRepartiRichiedenti(instance As FiltriRepartiRichiedenti)
    End Sub
  Partial Private Sub DeleteFiltriRepartiRichiedenti(instance As FiltriRepartiRichiedenti)
    End Sub
  Partial Private Sub InsertFiltriRepartiRichiedentiTipologie(instance As FiltriRepartiRichiedentiTipologie)
    End Sub
  Partial Private Sub UpdateFiltriRepartiRichiedentiTipologie(instance As FiltriRepartiRichiedentiTipologie)
    End Sub
  Partial Private Sub DeleteFiltriRepartiRichiedentiTipologie(instance As FiltriRepartiRichiedentiTipologie)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("Ausl_DwhOut_DSAConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property FiltriRepartiRichiedenti() As System.Data.Linq.Table(Of FiltriRepartiRichiedenti)
		Get
			Return Me.GetTable(Of FiltriRepartiRichiedenti)
		End Get
	End Property
	
	Public ReadOnly Property FiltriRepartiRichiedentiTipologie() As System.Data.Linq.Table(Of FiltriRepartiRichiedentiTipologie)
		Get
			Return Me.GetTable(Of FiltriRepartiRichiedentiTipologie)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FiltriRepartiRichiedenti")>  _
Partial Public Class FiltriRepartiRichiedenti
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CodiceReparto As String
	
	Private _Tipologia As String
	
	Private _FiltriRepartiRichiedentiTipologie As EntityRef(Of FiltriRepartiRichiedentiTipologie)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCodiceRepartoChanging(value As String)
    End Sub
    Partial Private Sub OnCodiceRepartoChanged()
    End Sub
    Partial Private Sub OnTipologiaChanging(value As String)
    End Sub
    Partial Private Sub OnTipologiaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._FiltriRepartiRichiedentiTipologie = CType(Nothing, EntityRef(Of FiltriRepartiRichiedentiTipologie))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodiceReparto", DbType:="VarChar(16) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property CodiceReparto() As String
		Get
			Return Me._CodiceReparto
		End Get
		Set
			If (String.Equals(Me._CodiceReparto, value) = false) Then
				Me.OnCodiceRepartoChanging(value)
				Me.SendPropertyChanging
				Me._CodiceReparto = value
				Me.SendPropertyChanged("CodiceReparto")
				Me.OnCodiceRepartoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tipologia", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Tipologia() As String
		Get
			Return Me._Tipologia
		End Get
		Set
			If (String.Equals(Me._Tipologia, value) = false) Then
				If Me._FiltriRepartiRichiedentiTipologie.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTipologiaChanging(value)
				Me.SendPropertyChanging
				Me._Tipologia = value
				Me.SendPropertyChanged("Tipologia")
				Me.OnTipologiaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FiltriRepartiRichiedentiTipologie_FiltriRepartiRichiedenti", Storage:="_FiltriRepartiRichiedentiTipologie", ThisKey:="Tipologia", OtherKey:="Tipologia", IsForeignKey:=true)>  _
	Public Property FiltriRepartiRichiedentiTipologie() As FiltriRepartiRichiedentiTipologie
		Get
			Return Me._FiltriRepartiRichiedentiTipologie.Entity
		End Get
		Set
			Dim previousValue As FiltriRepartiRichiedentiTipologie = Me._FiltriRepartiRichiedentiTipologie.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FiltriRepartiRichiedentiTipologie.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FiltriRepartiRichiedentiTipologie.Entity = Nothing
					previousValue.FiltriRepartiRichiedenti = Nothing
				End If
				Me._FiltriRepartiRichiedentiTipologie.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.FiltriRepartiRichiedenti = Me
					Me._Tipologia = value.Tipologia
				Else
					Me._Tipologia = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("FiltriRepartiRichiedentiTipologie")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="admin.FiltriRepartiRichiedentiTipologie")>  _
Partial Public Class FiltriRepartiRichiedentiTipologie
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Tipologia As String
	
	Private _FiltriRepartiRichiedenti As EntityRef(Of FiltriRepartiRichiedenti)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTipologiaChanging(value As String)
    End Sub
    Partial Private Sub OnTipologiaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._FiltriRepartiRichiedenti = CType(Nothing, EntityRef(Of FiltriRepartiRichiedenti))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tipologia", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Tipologia() As String
		Get
			Return Me._Tipologia
		End Get
		Set
			If (String.Equals(Me._Tipologia, value) = false) Then
				Me.OnTipologiaChanging(value)
				Me.SendPropertyChanging
				Me._Tipologia = value
				Me.SendPropertyChanged("Tipologia")
				Me.OnTipologiaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FiltriRepartiRichiedentiTipologie_FiltriRepartiRichiedenti", Storage:="_FiltriRepartiRichiedenti", ThisKey:="Tipologia", OtherKey:="Tipologia", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property FiltriRepartiRichiedenti() As FiltriRepartiRichiedenti
		Get
			Return Me._FiltriRepartiRichiedenti.Entity
		End Get
		Set
			Dim previousValue As FiltriRepartiRichiedenti = Me._FiltriRepartiRichiedenti.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FiltriRepartiRichiedenti.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FiltriRepartiRichiedenti.Entity = Nothing
					previousValue.FiltriRepartiRichiedentiTipologie = Nothing
				End If
				Me._FiltriRepartiRichiedenti.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.FiltriRepartiRichiedentiTipologie = Me
				End If
				Me.SendPropertyChanged("FiltriRepartiRichiedenti")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
