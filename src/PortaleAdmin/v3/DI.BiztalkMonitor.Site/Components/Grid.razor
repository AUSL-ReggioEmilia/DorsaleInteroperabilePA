@typeparam TableItem

@if (_currentItemList == null || !_currentItemList.Any())
{
	// Disegno la tabella
	<table class="table table-bordered table-sm @CssClass">
		<thead>
			<tr>@GridHeader</tr>
		</thead>
		<tbody>

			@if (_currentItemList == null)
			{
				@* Rows *@
				@for (int r = 0; r < 4; r++)
				{
					<tr>
						@* Columns *@
						@for (var c = 0; c < HeaderNumber; c++)
						{
							@if (c == 0 && r == 0)
							{
								<td>
									<span>Loading...</span>
									@for (int i = 0; i < RowHeight; i++)
									{
										<br />
									}
								</td>
							}
							else
							{
								<td>
									<span class="w-100 badge badge-pill badge-light">&nbsp;</span>
									@for (int i = 0; i < RowHeight; i++)
									{
										<br />
									}
								</td>
							}
						}
					</tr>
				}
			}
			else
			{
				<tr>
					<td colspan="999">

						@*Template per griglia vuota*@
						@*<div class="alert alert-light border-secondary" role="alert">*@
						@if (Empty == null)
						{
							<span>Non ci sono record da visualizzare!</span>
						}
						else
						{
							@Empty
						}
						@*</div>*@
					</td>
				</tr>

			}

		</tbody>
	</table>
}
else
{
	// Disegno la tabella
	<table class="table table-bordered table-sm table-hover @CssClass">
		<thead>
			<tr>@GridHeader</tr>
		</thead>
		<tbody>
			@foreach (var item in _currentItemList)
			{
				//Se Row Css è attivo allora cerco nel modello corrente una property chiamata "RowCss"
				if (RowCssActive)
				{
					Type t = item.GetType();
					System.Reflection.PropertyInfo prop = t.GetProperty("RowCss");
					object rowCss = prop?.GetValue(item);

					<tr class="tr-fade-in fade @rowCss?.ToString()">@GridRow(item)</tr>
				}
				else
				{
					<tr class="tr-fade-in">@GridRow(item)</tr>
				}
			}
		</tbody>

		@if (AllowPaging && _totalPages > 1)
		{
			<tfoot>
				<tr class="bg-light">
					<td colspan="999">

						<ul class="pagination">
							@* Visualizzazione delle pagine*@
							@for (int i = _startPage; i <= _endPage; i++)
							{
								var currentPage = i;
								<li class="btn  @(currentPage == _curPage ? "btn-primary" : "btn-link")" @onclick="@(() => UpdateItemList(currentPage))">
									@currentPage
								</li>
							}
						</ul>

					</td>
				</tr>
			</tfoot>
		}
	</table>
}

@code{

	int _totalPages;
	int _curPage;
	int _pagerSize;

	int _startPage;
	int _endPage;

	IEnumerable<TableItem> _currentItemList { get; set; }

	//
	// Parametri
	//

	/// <summary>
	/// Se impostata a true attiva l'autobind della property RowCss con il modello passato
	/// Se il modello ha la propietà RowCss allora la stringa RowCss viene applicata all'intera riga come classi CSS
	/// </summary>
	[Parameter] public bool RowCssActive { get; set; }

	/// <summary>
	/// CSS for table
	/// </summary>
	[Parameter] public string CssClass { get; set; }

	/// <summary>
	/// Header for BlazorGrid.
	/// </summary>
	[Parameter] public RenderFragment GridHeader { get; set; }

	/// <summary>
	/// Rows for BlazorGrid.
	/// </summary>
	[Parameter]
	public RenderFragment<TableItem> GridRow { get; set; }

	private IEnumerable<TableItem> _items;

	[Parameter]
	public IEnumerable<TableItem> Items
	{
		get { return _items; }
		set
		{
			_items = value;

			//Paginazione
			if (value != null)
			{
				_pagerSize = 10;
				if (_curPage == 0)
					_curPage = 1;

				_startPage = 0;
				_endPage = 0;

				_totalPages = (int)Math.Ceiling(Items.Count() / (decimal)PageSize);

				if (_totalPages < _curPage)
					_curPage--;
				_currentItemList = Items.Skip((_curPage - 1) * PageSize).Take(PageSize);

				SetPagerSize("forward");
			}
			else
			{
				//Lista vuota, animazione di ricerca
				_currentItemList = null;
			}
		}
	}

	/// <summary>
	/// Empty text for BlazorGrid.
	/// </summary>
	[Parameter] public RenderFragment Empty { get; set; }

	/// <summary>
	/// Size of each page of BlazorGrid. This is a required field.
	/// </summary>
	[Parameter]
	public int PageSize { get; set; } = 10;

	/// <summary>
	/// Abilita la paginazione
	/// </summary>
	[Parameter]
	public bool AllowPaging { get; set; }

	//PER CARICAMENTO

	/// <summary>
	/// Numero di header.. necessario per la preview della tabella
	/// </summary>
	[Parameter]
	public int HeaderNumber { get; set; } = 5;

	[Parameter]
	public int RowHeight { get; set; } = 1;

	void UpdateItemList(int currentPage)
	{
		//
		// Aggiorno la lista degli elementi correnti
		//
		// NOTA BENE:
		// utilizzo un metodo asincrono perchè l'ordinamento potrebbe impiegare
		// del tempo, quindi libero il thread per altro
		//

		_currentItemList = Items.Skip((currentPage - 1) * PageSize).Take(PageSize);
		_curPage = currentPage;
		StateHasChanged();
	}

	void SetPagerSize(string direction)
	{
		//
		// Aggiorno il numero della pagine visualizzate in base alla direzione passata
		//

		if (direction == "forward" && _endPage < _totalPages)
		{
			_startPage = _endPage + 1;
			if (_endPage + _pagerSize < _totalPages)
			{
				_endPage = _startPage + _pagerSize - 1;
			}
			else
			{
				_endPage = _totalPages;
			}
			StateHasChanged();
		}
		else if (direction == "back" && _startPage > 1)
		{
			_endPage = _startPage - 1;
			_startPage = _startPage - _pagerSize;
		}

	}

	void NavigateToPage(string direction)
	{
		if (direction == "next")
		{
			if (_curPage < _totalPages)
			{
				if (_curPage == _endPage)
				{
					SetPagerSize("forward");
				}
				_curPage += 1;
			}
		}
		else if (direction == "previous")
		{
			if (_curPage > 1)
			{
				if (_curPage == _startPage)
				{
					SetPagerSize("back");
				}
				_curPage -= 1;
			}
		}

		// Aggiorno la lista degli elementi correnti
		UpdateItemList(_curPage);
	}
}