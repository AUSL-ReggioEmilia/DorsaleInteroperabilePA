// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace DI.BiztalkMonitor.Site.Pages
{
    #line hidden
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\sandro\Source\Repos\DorsaleInteroperabilePA\Git\src\PortaleAdmin\v3\DI.BiztalkMonitor.Site\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\sandro\Source\Repos\DorsaleInteroperabilePA\Git\src\PortaleAdmin\v3\DI.BiztalkMonitor.Site\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\sandro\Source\Repos\DorsaleInteroperabilePA\Git\src\PortaleAdmin\v3\DI.BiztalkMonitor.Site\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\sandro\Source\Repos\DorsaleInteroperabilePA\Git\src\PortaleAdmin\v3\DI.BiztalkMonitor.Site\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\sandro\Source\Repos\DorsaleInteroperabilePA\Git\src\PortaleAdmin\v3\DI.BiztalkMonitor.Site\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\sandro\Source\Repos\DorsaleInteroperabilePA\Git\src\PortaleAdmin\v3\DI.BiztalkMonitor.Site\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\sandro\Source\Repos\DorsaleInteroperabilePA\Git\src\PortaleAdmin\v3\DI.BiztalkMonitor.Site\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\sandro\Source\Repos\DorsaleInteroperabilePA\Git\src\PortaleAdmin\v3\DI.BiztalkMonitor.Site\_Imports.razor"
using DI.BiztalkMonitor.Site;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\sandro\Source\Repos\DorsaleInteroperabilePA\Git\src\PortaleAdmin\v3\DI.BiztalkMonitor.Site\_Imports.razor"
using DI.BiztalkMonitor.Site.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\sandro\Source\Repos\DorsaleInteroperabilePA\Git\src\PortaleAdmin\v3\DI.BiztalkMonitor.Site\_Imports.razor"
using DI.BiztalkMonitor.Site.Classes;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\sandro\Source\Repos\DorsaleInteroperabilePA\Git\src\PortaleAdmin\v3\DI.BiztalkMonitor.Site\_Imports.razor"
using DI.BiztalkMonitor.Site.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\sandro\Source\Repos\DorsaleInteroperabilePA\Git\src\PortaleAdmin\v3\DI.BiztalkMonitor.Site\_Imports.razor"
using DI.BiztalkMonitor.DataAccess;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\sandro\Source\Repos\DorsaleInteroperabilePA\Git\src\PortaleAdmin\v3\DI.BiztalkMonitor.Site\_Imports.razor"
using DI.BiztalkMonitor.DataAccess.Adapters;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\sandro\Source\Repos\DorsaleInteroperabilePA\Git\src\PortaleAdmin\v3\DI.BiztalkMonitor.Site\_Imports.razor"
using DI.BiztalkMonitor.DataAccess.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Users\sandro\Source\Repos\DorsaleInteroperabilePA\Git\src\PortaleAdmin\v3\DI.BiztalkMonitor.Site\_Imports.razor"
using DI.BiztalkMonitor.DataAccess.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "C:\Users\sandro\Source\Repos\DorsaleInteroperabilePA\Git\src\PortaleAdmin\v3\DI.BiztalkMonitor.Site\_Imports.razor"
using Microsoft.Extensions.Logging;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\sandro\Source\Repos\DorsaleInteroperabilePA\Git\src\PortaleAdmin\v3\DI.BiztalkMonitor.Site\Pages\MessaggiScartati.razor"
using System;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\sandro\Source\Repos\DorsaleInteroperabilePA\Git\src\PortaleAdmin\v3\DI.BiztalkMonitor.Site\Pages\MessaggiScartati.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\sandro\Source\Repos\DorsaleInteroperabilePA\Git\src\PortaleAdmin\v3\DI.BiztalkMonitor.Site\Pages\MessaggiScartati.razor"
using System.Xml.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\sandro\Source\Repos\DorsaleInteroperabilePA\Git\src\PortaleAdmin\v3\DI.BiztalkMonitor.Site\Pages\MessaggiScartati.razor"
using Blazorise.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Users\sandro\Source\Repos\DorsaleInteroperabilePA\Git\src\PortaleAdmin\v3\DI.BiztalkMonitor.Site\Pages\MessaggiScartati.razor"
using Microsoft.AspNetCore.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "C:\Users\sandro\Source\Repos\DorsaleInteroperabilePA\Git\src\PortaleAdmin\v3\DI.BiztalkMonitor.Site\Pages\MessaggiScartati.razor"
using DI.BiztalkMonitor.Site.Pages.MessaggiScartatiPage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "C:\Users\sandro\Source\Repos\DorsaleInteroperabilePA\Git\src\PortaleAdmin\v3\DI.BiztalkMonitor.Site\Pages\MessaggiScartati.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "C:\Users\sandro\Source\Repos\DorsaleInteroperabilePA\Git\src\PortaleAdmin\v3\DI.BiztalkMonitor.Site\Pages\MessaggiScartati.razor"
using System.IO.Compression;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/messaggiscartati")]
    public partial class MessaggiScartati : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 304 "C:\Users\sandro\Source\Repos\DorsaleInteroperabilePA\Git\src\PortaleAdmin\v3\DI.BiztalkMonitor.Site\Pages\MessaggiScartati.razor"
      


    [CascadingParameter]
    private Task<AuthenticationState> _authenticationStateTask { get; set; }
    private System.Security.Claims.ClaimsPrincipal _user;

    [CascadingParameter]
    public bool ClientIsIE { get; set; }

    // Messaggio errore
    private string _messageError;

    // Id corrente
    private Guid _selectedId;
    private bool _isChiudiMassivoRunning;
    private bool _isExportMassivoRunning;


    // Booleana per la selezione multipla
    private bool _checkAll = false;
    public bool CheckAll
    {
        get => _checkAll;
        set
        {
            foreach (MessaggioScartatoPageModel messaggio in _messaggi)
            {
                if (messaggio.IsNotClosed)
                    messaggio.Checked = value;
            }

            _checkAll = value;
        }
    }

    private List<MessaggioScartatoPageModel> _messaggi;
    private List<MessaggioScartatoStatoData> _statiMessaggio = new List<MessaggioScartatoStatoData>();
    private MessaggioScartatoStatoData _statoChiuso;
    private ModalConferma _modalConferma = new ModalConferma();
    private ModalConferma _modalConfermaMassiva = new ModalConferma();
    private ModalXml _modalXml = new ModalXml();

    // Lista suggerimenti nome orchestrazione
    private List<string> _listaNomiOrc = new List<string>();


    #region Variabili Grid
    private string _currentSortColumn; // Colonna sulla quale si sta facendo l'ordinamento
    private GridHeaderItem.SortOrder _currentOrderColumn; // Indica in quele ordinamento si trova una colonna (None, Asc, Desc)
    #endregion


    protected override async Task OnInitializedAsync()
    {

        //Utente corrente
        _user = (await _authenticationStateTask).User;

        if (!ClientIsIE)
        {
            // Popola i suggerimenti per la texbox del nome orchestrazione solo se non su IE11
            await FetchAutocompleteNomiOrcAsync();
        }

        await FetchStatiMessaggiAsync();
        await MessaggiCercaAsync();

    }

    private async Task EnterToSearch(KeyboardEventArgs args) // Permette di effettuare la ricerca alla pressione Enter in una texbox
    {
        if (args.Key == "Enter")
        {
            //Tolgo il focus (blur) cosi da scatenare l'onchange dell'input e aggiornarlo. Su ie11 altrimenti non viene aggiornato in automatico
            if (ClientIsIE)
                await jsRunTime.InvokeVoidAsync("main.blur");

            await MessaggiCercaAsync();
        }
    }

    private async Task MessaggiCercaAsync() // Cerca
    {
        try
        {
            _messageError = null;
            _messaggi = null;
            _checkAll = false;

            string utenteTemp = _scopedState.Messaggi.Utente;
            // _utenteReadonly è true solo se siamo nello stato 4 "In carico a me" --> Variabile gestita nel "set" della property "Stato"
            if (_scopedState.Messaggi.UtenteReadonly)
            {
                utenteTemp = _user.Identity.Name;
            }

            using (MessaggiScartatiAdapter messaggiRepository = _dbRepository.MessaggiScartati)
            {
                _messaggi = MessaggioScartatoPageModel.CreateMessaggioScartatoPageModels(await messaggiRepository.GetAll(
                    _scopedState.Messaggi.Periodo,
                    _scopedState.Messaggi.Errore,
                    _scopedState.Messaggi.IdStato,
                    _scopedState.Messaggi.NomeOrchestrazione,
                    utenteTemp
                    ));
            }

            // Se lo stato è 3 --> Filtro i risultati i messaggi che non sono "Chiusi"
            if (_scopedState.Messaggi.IdStato == 3)
            {
                _messaggi = _messaggi.Where(x => x.IdStato != 2).ToList();
            }

        }
        catch (Exception ex)
        {
            _messageError = $"Errore durante il caricamento dei messaggi scartati";
            _logger.LogError(ex, _messageError);
        }
    }

    private async Task FetchStatiMessaggiAsync() // Reperisce gli stati del messaggio dal DB
    {
        try
        {
            using (MessaggiScartatiStatiAdapter messaggiScartatiStati = _dbRepository.MessaggiScartatiStati)
            {
                _statiMessaggio = await messaggiScartatiStati.GetAll();

                // Inserisco manualmente gli stati per l'interfaccia
                _statiMessaggio.Add(new MessaggioScartatoStatoData() { Id = 3, Descrizione = "Non chiusi" });
                _statiMessaggio.Add(new MessaggioScartatoStatoData() { Id = 4, Descrizione = "In carico a me" });
            }

            _statoChiuso = _statiMessaggio.Where(x => x.Id == 2).FirstOrDefault();
        }
        catch (Exception ex)
        {
            _messageError = $"Errore durante il caricamento degli stati";
            _logger.LogError(ex, _messageError);
        }
    }

    private async Task FetchAutocompleteNomiOrcAsync() // Reperisce la lista dei nomi orchestazione per i suggerimenti del filtro
    {
        try
        {
            using (MessaggiScartatiAdapter messaggiRepository = _dbRepository.MessaggiScartati)
            {
                _listaNomiOrc = await messaggiRepository.GetNomiOrchestrazioni();
            }
        }
        catch (Exception ex)
        {
            _messageError = $"Errore durante il caricamento dei suggerimenti per l'autocompletamento delle orchestrazioni";
            _logger.LogError(ex, _messageError);
        }

    }

    private void AutocompleteNomiOrcChanged(object newValue) // Imposta il valore del filtro con il valore selezionato dai suggeriti
    {
        if (newValue != null)
            _scopedState.Messaggi.NomeOrchestrazione = newValue.ToString();
        else
            _scopedState.Messaggi.NomeOrchestrazione = null;
    }

    private void Dettaglio(Guid id) // Naviga al dettaglio
    {
        NavigationManager.NavigateTo($"messaggiscartati/dettaglio/{id}");
    }

    private void RipristinaFiltri() // Ripristina il default dei filtri
    {
        _scopedState.Messaggi.Clear();
        _messageError = null;
    }

    private void OpenConfirmModal(Guid id) // Apre la modal conferma chiusura singolo
    {
        _modalConferma.Open(id.ToString());
    }

    private void OpenConfirmModalMassiva() // Apre la modal conferma chiusura massiva
    {
        _modalConfermaMassiva.Open();
    }

    private async Task ModalConfermaOkClick(ModalConferma.OkClickEventArgs arg)
    {
        try
        {
            Guid id = new Guid(arg.GetParameter);
            await SetStateToClose(id);
        }
        catch (Exception ex)
        {
            _messageError = $"Errore durante la chiusura del messaggio";
            _logger.LogError(ex, _messageError);
        }

    }

    private async Task SetStateToClose(Guid id) // Cambia lo stato del messaggio in "Chiuso"
    {
        try
        {
            // Aggiorno lo stato del messaggio
            using (MessaggiScartatiAdapter richiesteRepository = _dbRepository.MessaggiScartati)
            {
                await richiesteRepository.ChangeState(id, _statoChiuso.Id, _user.Identity.Name);
            }

            MessaggioScartatoPageModel messaggio = _messaggi.Find(x => x.Id == id);

            //Aggiorno lo stato del messaggio per UI
            messaggio.IdStato = _statoChiuso.Id;
            messaggio.DescrizioneStato = _statoChiuso.Descrizione;
            messaggio.Checked = false;

            //Aggiorno la lista in base allo stato, senza fare una nuova ricerca
            int statoFiltro = _scopedState.Messaggi.IdStato;
            //Se il filtro dello stato è su "Nuovi" (0), su "In carico" (1) oppure su "Non chiusi" (3) rimuovo dalla lista il messaggio
            if (statoFiltro == 0 || statoFiltro == 1 || statoFiltro == 3)
                _messaggi.Remove(messaggio);
        }
        catch (Exception ex)
        {
            _messageError = $"Errore durante la chiusura del messaggio";
            _logger.LogError(ex, _messageError);
        }

    }

    private async Task CloseSelected()
    {
        // Animazione di caricamento
        _isChiudiMassivoRunning = true;
        StateHasChanged();

        List<MessaggioScartatoPageModel> messaggiSelezionati = _messaggi.Where(x => x.Checked == true).ToList();

        if (messaggiSelezionati.Any())
        {
            foreach (MessaggioScartatoPageModel messaggio in messaggiSelezionati)
            {
                await SetStateToClose(messaggio.Id);
            }
        }

        // Tolgo l'animazione
        _isChiudiMassivoRunning = false;
        StateHasChanged();
    }

    private async Task OpenMessaggioXml(MessaggioScartatoPageModel messaggio) // Apre l'XML in una nuova finestra
    {
        // Aggiungiamo il numero "-1" per iundicare il messaggio completo (Intero)
        string id = messaggio.Id + _appState.Xml.Separatore + "-1";

        // Ottengo il messaggio XML dal DB
        XElement messaggioOrchestrazione;
        using (MessaggiScartatiAdapter messaggiRepository = _dbRepository.MessaggiScartati)
        {
            messaggioOrchestrazione = (await messaggiRepository.GetById(messaggio.Id)).MessaggioOrchestrazione;
        }

        // Aggiungo il messaggio al Dictionary per poterlo prendere dopo
        _appState.Xml.XmlDictionary.Add(id, messaggioOrchestrazione);

        // Parte della modal da sistemare --> non si riece a far vedere bene l'xml nel iframe detro la modal
        //_modalXml.Open(id);

        await Utility.OpenXMlNewTab(jsRunTime, id);
    }

    // Esporta i messaggiselezionati in unoi zip
    private async Task ExportSelected()
    {
        // Animazione di caricamento
        _isExportMassivoRunning = true;
        StateHasChanged();

        List<MessaggioScartatoPageModel> messaggiSelezionati = _messaggi.Where(x => x.Checked == true).ToList();

        if (messaggiSelezionati.Any())
        {

            using (var memoryStream = new MemoryStream())
            {
                using (var archive = new ZipArchive(memoryStream, ZipArchiveMode.Create, true))
                {
                    string rootFolderName = DateTime.Today.ToString("yyyy-MM-dd");
                    string currentDateTime = DateTime.Now.ToString("yyyy-mm-dd hh:mm");


                    foreach (MessaggioScartatoPageModel messaggio in messaggiSelezionati)
                    {

                        // Ottengo il messaggio XML dal DB
                        XElement messaggioOrchestrazione;
                        using (MessaggiScartatiAdapter messaggiRepository = _dbRepository.MessaggiScartati)
                            messaggioOrchestrazione = (await messaggiRepository.GetById(messaggio.Id)).MessaggioOrchestrazione;

                        // Prendo i nodi all'interno della root
                        IEnumerable<XElement> childList = from x in messaggioOrchestrazione.Elements() select x;

                        int count = 1;
                        foreach (XElement child in childList)
                        {
                            // Creto il file nella folder giusta
                            var currentFile = archive.CreateEntry($@"{rootFolderName}\{messaggio.NomeOrchestrazione}\{currentDateTime}_{messaggio.Id}\XML_{messaggio.NomeOrchestrazione}_{count}.out");

                            using (var entryStream = currentFile.Open())
                            {
                                using (var streamWriter = new StreamWriter(entryStream))
                                {
                                    streamWriter.Write(child);
                                }
                            }


                            count++;
                        }
                    }
                }
                await Utility.SaveAsZip(jsRunTime, $"Export_messaggi_{DateTime.Now}.zip", memoryStream.ToArray());

            }

            // Tolgo l'animazione
            _isExportMassivoRunning = false;
            StateHasChanged();
        }
    }


    #region Ordinamento Grid
    protected async Task OrderColumn(string column) // Ordina la colonna passata
    {

        // Al primo ordinamento della colonna la ordino in Asc
        if (_currentSortColumn != column)
        {
            _currentSortColumn = column;
            _currentOrderColumn = GridHeaderItem.SortOrder.Asc;
        }
        // Se la colonna è già stata ordinata allora inverto l'ordinamento
        else if (_currentSortColumn == column)
        {
            if (_currentOrderColumn == GridHeaderItem.SortOrder.Asc)
                _currentOrderColumn = GridHeaderItem.SortOrder.Desc;
            else
                _currentOrderColumn = GridHeaderItem.SortOrder.Asc;
        }

        // Ordino la colonna passata con l'ordinamento selezionato
        await Task.Run(() =>
        {
            //Ottengo la property dal nome
            System.Reflection.PropertyInfo prop = _messaggi.GetType().GetGenericArguments().Single().GetProperty(column);

            //Ordino per la property in base all'ordinamento attuale applicato alla colonna
            if (_currentOrderColumn == GridHeaderItem.SortOrder.Asc)
                _messaggi = _messaggi.OrderBy(x => prop.GetValue(x, null)).ToList();
            else
                _messaggi = _messaggi.OrderByDescending(x => prop.GetValue(x, null)).ToList();
        });
    }

    protected GridHeaderItem.SortOrder GetSortOrder(string column) // Ottiene l'attuale ordinamento della colonna passata
    {
        if (_currentSortColumn == column)
            return _currentOrderColumn;
        else
            return GridHeaderItem.SortOrder.None;
    }
    #endregion



#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IHttpContextAccessor _httpContextAccessor { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private State.ScopedState _scopedState { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private State.AppState _appState { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime jsRunTime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILogger<MessaggiScartati> _logger { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IDBRepository _dbRepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
    }
}
#pragma warning restore 1591
