'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="AuslAsmnRe_DwhConnSole3")>
Partial Public Class DwhConnSole3DataContext
	Inherits System.Data.Linq.DataContext

	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()

#Region "Extensibility Method Definitions"
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub InsertPresidiEroganti(instance As PresidiEroganti)
	End Sub
	Partial Private Sub UpdatePresidiEroganti(instance As PresidiEroganti)
	End Sub
	Partial Private Sub DeletePresidiEroganti(instance As PresidiEroganti)
	End Sub
	Partial Private Sub InsertPresidiErogantiAziendeEroganti(instance As PresidiErogantiAziendeEroganti)
	End Sub
	Partial Private Sub UpdatePresidiErogantiAziendeEroganti(instance As PresidiErogantiAziendeEroganti)
	End Sub
	Partial Private Sub DeletePresidiErogantiAziendeEroganti(instance As PresidiErogantiAziendeEroganti)
	End Sub
	Partial Private Sub InsertPresidiErogantiSistemiEroganti(instance As PresidiErogantiSistemiEroganti)
	End Sub
	Partial Private Sub UpdatePresidiErogantiSistemiEroganti(instance As PresidiErogantiSistemiEroganti)
	End Sub
	Partial Private Sub DeletePresidiErogantiSistemiEroganti(instance As PresidiErogantiSistemiEroganti)
	End Sub
	Partial Private Sub InsertPresidiErogantiTipiEroganti(instance As PresidiErogantiTipiEroganti)
	End Sub
	Partial Private Sub UpdatePresidiErogantiTipiEroganti(instance As PresidiErogantiTipiEroganti)
	End Sub
	Partial Private Sub DeletePresidiErogantiTipiEroganti(instance As PresidiErogantiTipiEroganti)
	End Sub
	Partial Private Sub InsertRepartiRichiedenti(instance As RepartiRichiedenti)
	End Sub
	Partial Private Sub UpdateRepartiRichiedenti(instance As RepartiRichiedenti)
	End Sub
	Partial Private Sub DeleteRepartiRichiedenti(instance As RepartiRichiedenti)
	End Sub
	Partial Private Sub InsertRepartiRichiedentiTipiEroganti(instance As RepartiRichiedentiTipiEroganti)
	End Sub
	Partial Private Sub UpdateRepartiRichiedentiTipiEroganti(instance As RepartiRichiedentiTipiEroganti)
	End Sub
	Partial Private Sub DeleteRepartiRichiedentiTipiEroganti(instance As RepartiRichiedentiTipiEroganti)
	End Sub
	Partial Private Sub InsertRepartiRichiedentiAziendeEroganti(instance As RepartiRichiedentiAziendeEroganti)
	End Sub
	Partial Private Sub UpdateRepartiRichiedentiAziendeEroganti(instance As RepartiRichiedentiAziendeEroganti)
	End Sub
	Partial Private Sub DeleteRepartiRichiedentiAziendeEroganti(instance As RepartiRichiedentiAziendeEroganti)
	End Sub
	Partial Private Sub InsertRepartiRichiedentiSistemiEroganti(instance As RepartiRichiedentiSistemiEroganti)
	End Sub
	Partial Private Sub UpdateRepartiRichiedentiSistemiEroganti(instance As RepartiRichiedentiSistemiEroganti)
	End Sub
	Partial Private Sub DeleteRepartiRichiedentiSistemiEroganti(instance As RepartiRichiedentiSistemiEroganti)
	End Sub
#End Region

	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("AuslAsmnRe_DwhConnSole3ConnectionString").ConnectionString, mappingSource)
		OnCreated()
	End Sub

	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated()
	End Sub

	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated()
	End Sub

	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated()
	End Sub

	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated()
	End Sub

	Public ReadOnly Property PresidiEroganti() As System.Data.Linq.Table(Of PresidiEroganti)
		Get
			Return Me.GetTable(Of PresidiEroganti)
		End Get
	End Property

	Public ReadOnly Property PresidiErogantiAziendeEroganti() As System.Data.Linq.Table(Of PresidiErogantiAziendeEroganti)
		Get
			Return Me.GetTable(Of PresidiErogantiAziendeEroganti)
		End Get
	End Property

	Public ReadOnly Property PresidiErogantiSistemiEroganti() As System.Data.Linq.Table(Of PresidiErogantiSistemiEroganti)
		Get
			Return Me.GetTable(Of PresidiErogantiSistemiEroganti)
		End Get
	End Property

	Public ReadOnly Property PresidiErogantiTipiEroganti() As System.Data.Linq.Table(Of PresidiErogantiTipiEroganti)
		Get
			Return Me.GetTable(Of PresidiErogantiTipiEroganti)
		End Get
	End Property

	Public ReadOnly Property RepartiRichiedentis() As System.Data.Linq.Table(Of RepartiRichiedenti)
		Get
			Return Me.GetTable(Of RepartiRichiedenti)
		End Get
	End Property

	Public ReadOnly Property RepartiRichiedentiTipiErogantis() As System.Data.Linq.Table(Of RepartiRichiedentiTipiEroganti)
		Get
			Return Me.GetTable(Of RepartiRichiedentiTipiEroganti)
		End Get
	End Property

	Public ReadOnly Property RepartiRichiedentiAziendeErogantis() As System.Data.Linq.Table(Of RepartiRichiedentiAziendeEroganti)
		Get
			Return Me.GetTable(Of RepartiRichiedentiAziendeEroganti)
		End Get
	End Property

	Public ReadOnly Property RepartiRichiedentiSistemiErogantis() As System.Data.Linq.Table(Of RepartiRichiedentiSistemiEroganti)
		Get
			Return Me.GetTable(Of RepartiRichiedentiSistemiEroganti)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PresidiEroganti")>
Partial Public Class PresidiEroganti
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

	Private _TipoErogante As String

	Private _AziendaErogante As String

	Private _SistemaErogante As String

	Private _RepartoErogante As String

	Private _AziendaErogantePrefissoEsterno As String

	Private _PresidioEroganteCodice As String

	Private _PresidioEroganteDescr As String

	Private _PresidioEroganteSubCodice As String

	Private _AziendaEroganteDescr As String

	Private _RepartoEroganteDescr As String

	Private _AziendaEroganteCodice As String

	Private _RegioneEroganteCodice As String

	Private _UnitaOperativaCodice As String

	Private _UnitaOperativaDescr As String

	Private _UnitaOperativaSubCodice As String

	Private _FseAbilitato As Boolean

	Private _PresidiErogantiAziendeEroganti As EntityRef(Of PresidiErogantiAziendeEroganti)

	Private _PresidiErogantiSistemiEroganti As EntityRef(Of PresidiErogantiSistemiEroganti)

	Private _PresidiErogantiTipiEroganti As EntityRef(Of PresidiErogantiTipiEroganti)

#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnTipoEroganteChanging(value As String)
	End Sub
	Partial Private Sub OnTipoEroganteChanged()
	End Sub
	Partial Private Sub OnAziendaEroganteChanging(value As String)
	End Sub
	Partial Private Sub OnAziendaEroganteChanged()
	End Sub
	Partial Private Sub OnSistemaEroganteChanging(value As String)
	End Sub
	Partial Private Sub OnSistemaEroganteChanged()
	End Sub
	Partial Private Sub OnRepartoEroganteChanging(value As String)
	End Sub
	Partial Private Sub OnRepartoEroganteChanged()
	End Sub
	Partial Private Sub OnAziendaErogantePrefissoEsternoChanging(value As String)
	End Sub
	Partial Private Sub OnAziendaErogantePrefissoEsternoChanged()
	End Sub
	Partial Private Sub OnPresidioEroganteCodiceChanging(value As String)
	End Sub
	Partial Private Sub OnPresidioEroganteCodiceChanged()
	End Sub
	Partial Private Sub OnPresidioEroganteDescrChanging(value As String)
	End Sub
	Partial Private Sub OnPresidioEroganteDescrChanged()
	End Sub
	Partial Private Sub OnPresidioEroganteSubCodiceChanging(value As String)
	End Sub
	Partial Private Sub OnPresidioEroganteSubCodiceChanged()
	End Sub
	Partial Private Sub OnAziendaEroganteDescrChanging(value As String)
	End Sub
	Partial Private Sub OnAziendaEroganteDescrChanged()
	End Sub
	Partial Private Sub OnRepartoEroganteDescrChanging(value As String)
	End Sub
	Partial Private Sub OnRepartoEroganteDescrChanged()
	End Sub
	Partial Private Sub OnAziendaEroganteCodiceChanging(value As String)
	End Sub
	Partial Private Sub OnAziendaEroganteCodiceChanged()
	End Sub
	Partial Private Sub OnRegioneEroganteCodiceChanging(value As String)
	End Sub
	Partial Private Sub OnRegioneEroganteCodiceChanged()
	End Sub
	Partial Private Sub OnUnitaOperativaCodiceChanging(value As String)
	End Sub
	Partial Private Sub OnUnitaOperativaCodiceChanged()
	End Sub
	Partial Private Sub OnUnitaOperativaDescrChanging(value As String)
	End Sub
	Partial Private Sub OnUnitaOperativaDescrChanged()
	End Sub
	Partial Private Sub OnUnitaOperativaSubCodiceChanging(value As String)
	End Sub
	Partial Private Sub OnUnitaOperativaSubCodiceChanged()
	End Sub
	Partial Private Sub OnFseAbilitatoChanging(value As Boolean)
	End Sub
	Partial Private Sub OnFseAbilitatoChanged()
	End Sub
#End Region

	Public Sub New()
		MyBase.New
		Me._PresidiErogantiAziendeEroganti = CType(Nothing, EntityRef(Of PresidiErogantiAziendeEroganti))
		Me._PresidiErogantiSistemiEroganti = CType(Nothing, EntityRef(Of PresidiErogantiSistemiEroganti))
		Me._PresidiErogantiTipiEroganti = CType(Nothing, EntityRef(Of PresidiErogantiTipiEroganti))
		OnCreated()
	End Sub

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoErogante", DbType:="VarChar(16) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)>
	Public Property TipoErogante() As String
		Get
			Return Me._TipoErogante
		End Get
		Set
			If (String.Equals(Me._TipoErogante, Value) = False) Then
				If Me._PresidiErogantiTipiEroganti.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTipoEroganteChanging(Value)
				Me.SendPropertyChanging()
				Me._TipoErogante = Value
				Me.SendPropertyChanged("TipoErogante")
				Me.OnTipoEroganteChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AziendaErogante", DbType:="VarChar(16) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)>
	Public Property AziendaErogante() As String
		Get
			Return Me._AziendaErogante
		End Get
		Set
			If (String.Equals(Me._AziendaErogante, Value) = False) Then
				If Me._PresidiErogantiAziendeEroganti.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAziendaEroganteChanging(Value)
				Me.SendPropertyChanging()
				Me._AziendaErogante = Value
				Me.SendPropertyChanged("AziendaErogante")
				Me.OnAziendaEroganteChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SistemaErogante", DbType:="VarChar(16) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)>
	Public Property SistemaErogante() As String
		Get
			Return Me._SistemaErogante
		End Get
		Set
			If (String.Equals(Me._SistemaErogante, Value) = False) Then
				If Me._PresidiErogantiSistemiEroganti.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSistemaEroganteChanging(Value)
				Me.SendPropertyChanging()
				Me._SistemaErogante = Value
				Me.SendPropertyChanged("SistemaErogante")
				Me.OnSistemaEroganteChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RepartoErogante", DbType:="VarChar(64) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)>
	Public Property RepartoErogante() As String
		Get
			Return Me._RepartoErogante
		End Get
		Set
			If (String.Equals(Me._RepartoErogante, Value) = False) Then
				Me.OnRepartoEroganteChanging(Value)
				Me.SendPropertyChanging()
				Me._RepartoErogante = Value
				Me.SendPropertyChanged("RepartoErogante")
				Me.OnRepartoEroganteChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AziendaErogantePrefissoEsterno", DbType:="VarChar(16) NOT NULL", CanBeNull:=False)>
	Public Property AziendaErogantePrefissoEsterno() As String
		Get
			Return Me._AziendaErogantePrefissoEsterno
		End Get
		Set
			If (String.Equals(Me._AziendaErogantePrefissoEsterno, Value) = False) Then
				Me.OnAziendaErogantePrefissoEsternoChanging(Value)
				Me.SendPropertyChanging()
				Me._AziendaErogantePrefissoEsterno = Value
				Me.SendPropertyChanged("AziendaErogantePrefissoEsterno")
				Me.OnAziendaErogantePrefissoEsternoChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PresidioEroganteCodice", DbType:="VarChar(16) NOT NULL", CanBeNull:=False)>
	Public Property PresidioEroganteCodice() As String
		Get
			Return Me._PresidioEroganteCodice
		End Get
		Set
			If (String.Equals(Me._PresidioEroganteCodice, Value) = False) Then
				Me.OnPresidioEroganteCodiceChanging(Value)
				Me.SendPropertyChanging()
				Me._PresidioEroganteCodice = Value
				Me.SendPropertyChanged("PresidioEroganteCodice")
				Me.OnPresidioEroganteCodiceChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PresidioEroganteDescr", DbType:="VarChar(64)")>
	Public Property PresidioEroganteDescr() As String
		Get
			Return Me._PresidioEroganteDescr
		End Get
		Set
			If (String.Equals(Me._PresidioEroganteDescr, Value) = False) Then
				Me.OnPresidioEroganteDescrChanging(Value)
				Me.SendPropertyChanging()
				Me._PresidioEroganteDescr = Value
				Me.SendPropertyChanged("PresidioEroganteDescr")
				Me.OnPresidioEroganteDescrChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PresidioEroganteSubCodice", DbType:="VarChar(16) NOT NULL", CanBeNull:=False)>
	Public Property PresidioEroganteSubCodice() As String
		Get
			Return Me._PresidioEroganteSubCodice
		End Get
		Set
			If (String.Equals(Me._PresidioEroganteSubCodice, Value) = False) Then
				Me.OnPresidioEroganteSubCodiceChanging(Value)
				Me.SendPropertyChanging()
				Me._PresidioEroganteSubCodice = Value
				Me.SendPropertyChanged("PresidioEroganteSubCodice")
				Me.OnPresidioEroganteSubCodiceChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AziendaEroganteDescr", DbType:="VarChar(64)")>
	Public Property AziendaEroganteDescr() As String
		Get
			Return Me._AziendaEroganteDescr
		End Get
		Set
			If (String.Equals(Me._AziendaEroganteDescr, Value) = False) Then
				Me.OnAziendaEroganteDescrChanging(Value)
				Me.SendPropertyChanging()
				Me._AziendaEroganteDescr = Value
				Me.SendPropertyChanged("AziendaEroganteDescr")
				Me.OnAziendaEroganteDescrChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RepartoEroganteDescr", DbType:="VarChar(64)")>
	Public Property RepartoEroganteDescr() As String
		Get
			Return Me._RepartoEroganteDescr
		End Get
		Set
			If (String.Equals(Me._RepartoEroganteDescr, Value) = False) Then
				Me.OnRepartoEroganteDescrChanging(Value)
				Me.SendPropertyChanging()
				Me._RepartoEroganteDescr = Value
				Me.SendPropertyChanged("RepartoEroganteDescr")
				Me.OnRepartoEroganteDescrChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AziendaEroganteCodice", DbType:="VarChar(16) NOT NULL", CanBeNull:=False)>
	Public Property AziendaEroganteCodice() As String
		Get
			Return Me._AziendaEroganteCodice
		End Get
		Set
			If (String.Equals(Me._AziendaEroganteCodice, Value) = False) Then
				Me.OnAziendaEroganteCodiceChanging(Value)
				Me.SendPropertyChanging()
				Me._AziendaEroganteCodice = Value
				Me.SendPropertyChanged("AziendaEroganteCodice")
				Me.OnAziendaEroganteCodiceChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegioneEroganteCodice", DbType:="VarChar(16) NOT NULL", CanBeNull:=False)>
	Public Property RegioneEroganteCodice() As String
		Get
			Return Me._RegioneEroganteCodice
		End Get
		Set
			If (String.Equals(Me._RegioneEroganteCodice, Value) = False) Then
				Me.OnRegioneEroganteCodiceChanging(Value)
				Me.SendPropertyChanging()
				Me._RegioneEroganteCodice = Value
				Me.SendPropertyChanged("RegioneEroganteCodice")
				Me.OnRegioneEroganteCodiceChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitaOperativaCodice", DbType:="VarChar(16)")>
	Public Property UnitaOperativaCodice() As String
		Get
			Return Me._UnitaOperativaCodice
		End Get
		Set
			If (String.Equals(Me._UnitaOperativaCodice, Value) = False) Then
				Me.OnUnitaOperativaCodiceChanging(Value)
				Me.SendPropertyChanging()
				Me._UnitaOperativaCodice = Value
				Me.SendPropertyChanged("UnitaOperativaCodice")
				Me.OnUnitaOperativaCodiceChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitaOperativaDescr", DbType:="VarChar(64)")>
	Public Property UnitaOperativaDescr() As String
		Get
			Return Me._UnitaOperativaDescr
		End Get
		Set
			If (String.Equals(Me._UnitaOperativaDescr, Value) = False) Then
				Me.OnUnitaOperativaDescrChanging(Value)
				Me.SendPropertyChanging()
				Me._UnitaOperativaDescr = Value
				Me.SendPropertyChanged("UnitaOperativaDescr")
				Me.OnUnitaOperativaDescrChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitaOperativaSubCodice", DbType:="VarChar(16)")>
	Public Property UnitaOperativaSubCodice() As String
		Get
			Return Me._UnitaOperativaSubCodice
		End Get
		Set
			If (String.Equals(Me._UnitaOperativaSubCodice, Value) = False) Then
				Me.OnUnitaOperativaSubCodiceChanging(Value)
				Me.SendPropertyChanging()
				Me._UnitaOperativaSubCodice = Value
				Me.SendPropertyChanged("UnitaOperativaSubCodice")
				Me.OnUnitaOperativaSubCodiceChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FseAbilitato", DbType:="Bit NOT NULL")>
	Public Property FseAbilitato() As Boolean
		Get
			Return Me._FseAbilitato
		End Get
		Set
			If ((Me._FseAbilitato = Value) _
						= False) Then
				Me.OnFseAbilitatoChanging(Value)
				Me.SendPropertyChanging()
				Me._FseAbilitato = Value
				Me.SendPropertyChanged("FseAbilitato")
				Me.OnFseAbilitatoChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PresidiErogantiAziendeEroganti_PresidiEroganti", Storage:="_PresidiErogantiAziendeEroganti", ThisKey:="AziendaErogante", OtherKey:="AziendaErogante", IsForeignKey:=True)>
	Public Property PresidiErogantiAziendeEroganti() As PresidiErogantiAziendeEroganti
		Get
			Return Me._PresidiErogantiAziendeEroganti.Entity
		End Get
		Set
			Dim previousValue As PresidiErogantiAziendeEroganti = Me._PresidiErogantiAziendeEroganti.Entity
			If ((Object.Equals(previousValue, Value) = False) _
						OrElse (Me._PresidiErogantiAziendeEroganti.HasLoadedOrAssignedValue = False)) Then
				Me.SendPropertyChanging()

				If ((previousValue Is Nothing) _
							= False) Then
					Me._PresidiErogantiAziendeEroganti.Entity = Nothing
					previousValue.PresidiEroganti.Remove(Me)
				End If
				Me._PresidiErogantiAziendeEroganti.Entity = Value
				If ((Value Is Nothing) _
							= False) Then
					Value.PresidiEroganti.Add(Me)
					Me._AziendaErogante = Value.AziendaErogante
				Else
					Me._AziendaErogante = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("PresidiErogantiAziendeEroganti")
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PresidiErogantiSistemiEroganti_PresidiEroganti", Storage:="_PresidiErogantiSistemiEroganti", ThisKey:="SistemaErogante", OtherKey:="SistemaErogante", IsForeignKey:=True)>
	Public Property PresidiErogantiSistemiEroganti() As PresidiErogantiSistemiEroganti
		Get
			Return Me._PresidiErogantiSistemiEroganti.Entity
		End Get
		Set
			Dim previousValue As PresidiErogantiSistemiEroganti = Me._PresidiErogantiSistemiEroganti.Entity
			If ((Object.Equals(previousValue, Value) = False) _
						OrElse (Me._PresidiErogantiSistemiEroganti.HasLoadedOrAssignedValue = False)) Then
				Me.SendPropertyChanging()

				If ((previousValue Is Nothing) _
							= False) Then
					Me._PresidiErogantiSistemiEroganti.Entity = Nothing
					previousValue.PresidiEroganti = Nothing
				End If
				Me._PresidiErogantiSistemiEroganti.Entity = Value
				If ((Value Is Nothing) _
							= False) Then
					Value.PresidiEroganti = Me
					Me._SistemaErogante = Value.SistemaErogante
				Else
					Me._SistemaErogante = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("PresidiErogantiSistemiEroganti")
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PresidiErogantiTipiEroganti_PresidiEroganti", Storage:="_PresidiErogantiTipiEroganti", ThisKey:="TipoErogante", OtherKey:="TipoErogante", IsForeignKey:=True)>
	Public Property PresidiErogantiTipiEroganti() As PresidiErogantiTipiEroganti
		Get
			Return Me._PresidiErogantiTipiEroganti.Entity
		End Get
		Set
			Dim previousValue As PresidiErogantiTipiEroganti = Me._PresidiErogantiTipiEroganti.Entity
			If ((Object.Equals(previousValue, Value) = False) _
						OrElse (Me._PresidiErogantiTipiEroganti.HasLoadedOrAssignedValue = False)) Then
				Me.SendPropertyChanging()

				If ((previousValue Is Nothing) _
							= False) Then
					Me._PresidiErogantiTipiEroganti.Entity = Nothing
					previousValue.PresidiEroganti = Nothing
				End If
				Me._PresidiErogantiTipiEroganti.Entity = Value
				If ((Value Is Nothing) _
							= False) Then
					Value.PresidiEroganti = Me
					Me._TipoErogante = Value.TipoErogante
				Else
					Me._TipoErogante = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("PresidiErogantiTipiEroganti")
			End If
		End Set
	End Property

	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing) _
					= False) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub

	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing) _
					= False) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="admin.PresidiErogantiAziendeEroganti")>
Partial Public Class PresidiErogantiAziendeEroganti
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

	Private _AziendaErogante As String

	Private _PresidiEroganti As EntitySet(Of PresidiEroganti)

#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnAziendaEroganteChanging(value As String)
	End Sub
	Partial Private Sub OnAziendaEroganteChanged()
	End Sub
#End Region

	Public Sub New()
		MyBase.New
		Me._PresidiEroganti = New EntitySet(Of PresidiEroganti)(AddressOf Me.attach_PresidiEroganti, AddressOf Me.detach_PresidiEroganti)
		OnCreated()
	End Sub

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AziendaErogante", DbType:="VarChar(16) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)>
	Public Property AziendaErogante() As String
		Get
			Return Me._AziendaErogante
		End Get
		Set
			If (String.Equals(Me._AziendaErogante, Value) = False) Then
				Me.OnAziendaEroganteChanging(Value)
				Me.SendPropertyChanging()
				Me._AziendaErogante = Value
				Me.SendPropertyChanged("AziendaErogante")
				Me.OnAziendaEroganteChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PresidiErogantiAziendeEroganti_PresidiEroganti", Storage:="_PresidiEroganti", ThisKey:="AziendaErogante", OtherKey:="AziendaErogante")>
	Public Property PresidiEroganti() As EntitySet(Of PresidiEroganti)
		Get
			Return Me._PresidiEroganti
		End Get
		Set
			Me._PresidiEroganti.Assign(Value)
		End Set
	End Property

	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing) _
					= False) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub

	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing) _
					= False) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub

	Private Sub attach_PresidiEroganti(ByVal entity As PresidiEroganti)
		Me.SendPropertyChanging()
		entity.PresidiErogantiAziendeEroganti = Me
	End Sub

	Private Sub detach_PresidiEroganti(ByVal entity As PresidiEroganti)
		Me.SendPropertyChanging()
		entity.PresidiErogantiAziendeEroganti = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="admin.PresidiErogantiSistemiEroganti")>
Partial Public Class PresidiErogantiSistemiEroganti
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

	Private _SistemaErogante As String

	Private _PresidiEroganti As EntityRef(Of PresidiEroganti)

#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnSistemaEroganteChanging(value As String)
	End Sub
	Partial Private Sub OnSistemaEroganteChanged()
	End Sub
#End Region

	Public Sub New()
		MyBase.New
		Me._PresidiEroganti = CType(Nothing, EntityRef(Of PresidiEroganti))
		OnCreated()
	End Sub

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SistemaErogante", DbType:="VarChar(16) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)>
	Public Property SistemaErogante() As String
		Get
			Return Me._SistemaErogante
		End Get
		Set
			If (String.Equals(Me._SistemaErogante, Value) = False) Then
				Me.OnSistemaEroganteChanging(Value)
				Me.SendPropertyChanging()
				Me._SistemaErogante = Value
				Me.SendPropertyChanged("SistemaErogante")
				Me.OnSistemaEroganteChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PresidiErogantiSistemiEroganti_PresidiEroganti", Storage:="_PresidiEroganti", ThisKey:="SistemaErogante", OtherKey:="SistemaErogante", IsUnique:=True, IsForeignKey:=False)>
	Public Property PresidiEroganti() As PresidiEroganti
		Get
			Return Me._PresidiEroganti.Entity
		End Get
		Set
			Dim previousValue As PresidiEroganti = Me._PresidiEroganti.Entity
			If ((Object.Equals(previousValue, Value) = False) _
						OrElse (Me._PresidiEroganti.HasLoadedOrAssignedValue = False)) Then
				Me.SendPropertyChanging()

				If ((previousValue Is Nothing) _
							= False) Then
					Me._PresidiEroganti.Entity = Nothing
					previousValue.PresidiErogantiSistemiEroganti = Nothing
				End If
				Me._PresidiEroganti.Entity = Value
				If (Object.Equals(Value, Nothing) = False) Then
					Value.PresidiErogantiSistemiEroganti = Me
				End If
				Me.SendPropertyChanged("PresidiEroganti")
			End If
		End Set
	End Property

	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing) _
					= False) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub

	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing) _
					= False) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="admin.PresidiErogantiTipiEroganti")>
Partial Public Class PresidiErogantiTipiEroganti
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

	Private _TipoErogante As String

	Private _PresidiEroganti As EntityRef(Of PresidiEroganti)

#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnTipoEroganteChanging(value As String)
	End Sub
	Partial Private Sub OnTipoEroganteChanged()
	End Sub
#End Region

	Public Sub New()
		MyBase.New
		Me._PresidiEroganti = CType(Nothing, EntityRef(Of PresidiEroganti))
		OnCreated()
	End Sub

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoErogante", DbType:="VarChar(16) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)>
	Public Property TipoErogante() As String
		Get
			Return Me._TipoErogante
		End Get
		Set
			If (String.Equals(Me._TipoErogante, Value) = False) Then
				Me.OnTipoEroganteChanging(Value)
				Me.SendPropertyChanging()
				Me._TipoErogante = Value
				Me.SendPropertyChanged("TipoErogante")
				Me.OnTipoEroganteChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PresidiErogantiTipiEroganti_PresidiEroganti", Storage:="_PresidiEroganti", ThisKey:="TipoErogante", OtherKey:="TipoErogante", IsUnique:=True, IsForeignKey:=False)>
	Public Property PresidiEroganti() As PresidiEroganti
		Get
			Return Me._PresidiEroganti.Entity
		End Get
		Set
			Dim previousValue As PresidiEroganti = Me._PresidiEroganti.Entity
			If ((Object.Equals(previousValue, Value) = False) _
						OrElse (Me._PresidiEroganti.HasLoadedOrAssignedValue = False)) Then
				Me.SendPropertyChanging()

				If ((previousValue Is Nothing) _
							= False) Then
					Me._PresidiEroganti.Entity = Nothing
					previousValue.PresidiErogantiTipiEroganti = Nothing
				End If
				Me._PresidiEroganti.Entity = Value
				If (Object.Equals(Value, Nothing) = False) Then
					Value.PresidiErogantiTipiEroganti = Me
				End If
				Me.SendPropertyChanged("PresidiEroganti")
			End If
		End Set
	End Property

	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing) _
					= False) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub

	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing) _
					= False) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RepartiRichiedenti")>
Partial Public Class RepartiRichiedenti
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

	Private _TipoErogante As String

	Private _AziendaErogante As String

	Private _SistemaErogante As String

	Private _RepartoRichiedenteCodice As String

	Private _RepartoRichiedenteTipo As String

	Private _IstitutoCodice As String

	Private _PercorsoCarceri As Boolean

	Private _PercorsoSert As Boolean

	Private _RepartiRichiedentiTipiEroganti As EntityRef(Of RepartiRichiedentiTipiEroganti)

	Private _RepartiRichiedentiAziendeEroganti As EntityRef(Of RepartiRichiedentiAziendeEroganti)

	Private _RepartiRichiedentiSistemiEroganti As EntityRef(Of RepartiRichiedentiSistemiEroganti)

#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnTipoEroganteChanging(value As String)
	End Sub
	Partial Private Sub OnTipoEroganteChanged()
	End Sub
	Partial Private Sub OnAziendaEroganteChanging(value As String)
	End Sub
	Partial Private Sub OnAziendaEroganteChanged()
	End Sub
	Partial Private Sub OnSistemaEroganteChanging(value As String)
	End Sub
	Partial Private Sub OnSistemaEroganteChanged()
	End Sub
	Partial Private Sub OnRepartoRichiedenteCodiceChanging(value As String)
	End Sub
	Partial Private Sub OnRepartoRichiedenteCodiceChanged()
	End Sub
	Partial Private Sub OnRepartoRichiedenteTipoChanging(value As String)
	End Sub
	Partial Private Sub OnRepartoRichiedenteTipoChanged()
	End Sub
	Partial Private Sub OnIstitutoCodiceChanging(value As String)
	End Sub
	Partial Private Sub OnIstitutoCodiceChanged()
	End Sub
	Partial Private Sub OnPercorsoCarceriChanging(value As Boolean)
	End Sub
	Partial Private Sub OnPercorsoCarceriChanged()
	End Sub
	Partial Private Sub OnPercorsoSertChanging(value As Boolean)
	End Sub
	Partial Private Sub OnPercorsoSertChanged()
	End Sub
#End Region

	Public Sub New()
		MyBase.New
		Me._RepartiRichiedentiTipiEroganti = CType(Nothing, EntityRef(Of RepartiRichiedentiTipiEroganti))
		Me._RepartiRichiedentiAziendeEroganti = CType(Nothing, EntityRef(Of RepartiRichiedentiAziendeEroganti))
		Me._RepartiRichiedentiSistemiEroganti = CType(Nothing, EntityRef(Of RepartiRichiedentiSistemiEroganti))
		OnCreated()
	End Sub

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoErogante", DbType:="VarChar(16) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)>
	Public Property TipoErogante() As String
		Get
			Return Me._TipoErogante
		End Get
		Set
			If (String.Equals(Me._TipoErogante, Value) = False) Then
				If Me._RepartiRichiedentiTipiEroganti.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTipoEroganteChanging(Value)
				Me.SendPropertyChanging()
				Me._TipoErogante = Value
				Me.SendPropertyChanged("TipoErogante")
				Me.OnTipoEroganteChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AziendaErogante", DbType:="VarChar(16) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)>
	Public Property AziendaErogante() As String
		Get
			Return Me._AziendaErogante
		End Get
		Set
			If (String.Equals(Me._AziendaErogante, Value) = False) Then
				If Me._RepartiRichiedentiAziendeEroganti.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAziendaEroganteChanging(Value)
				Me.SendPropertyChanging()
				Me._AziendaErogante = Value
				Me.SendPropertyChanged("AziendaErogante")
				Me.OnAziendaEroganteChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SistemaErogante", DbType:="VarChar(16) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)>
	Public Property SistemaErogante() As String
		Get
			Return Me._SistemaErogante
		End Get
		Set
			If (String.Equals(Me._SistemaErogante, Value) = False) Then
				If Me._RepartiRichiedentiSistemiEroganti.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSistemaEroganteChanging(Value)
				Me.SendPropertyChanging()
				Me._SistemaErogante = Value
				Me.SendPropertyChanged("SistemaErogante")
				Me.OnSistemaEroganteChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RepartoRichiedenteCodice", DbType:="VarChar(16) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)>
	Public Property RepartoRichiedenteCodice() As String
		Get
			Return Me._RepartoRichiedenteCodice
		End Get
		Set
			If (String.Equals(Me._RepartoRichiedenteCodice, Value) = False) Then
				Me.OnRepartoRichiedenteCodiceChanging(Value)
				Me.SendPropertyChanging()
				Me._RepartoRichiedenteCodice = Value
				Me.SendPropertyChanged("RepartoRichiedenteCodice")
				Me.OnRepartoRichiedenteCodiceChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RepartoRichiedenteTipo", DbType:="VarChar(64)")>
	Public Property RepartoRichiedenteTipo() As String
		Get
			Return Me._RepartoRichiedenteTipo
		End Get
		Set
			If (String.Equals(Me._RepartoRichiedenteTipo, Value) = False) Then
				Me.OnRepartoRichiedenteTipoChanging(Value)
				Me.SendPropertyChanging()
				Me._RepartoRichiedenteTipo = Value
				Me.SendPropertyChanged("RepartoRichiedenteTipo")
				Me.OnRepartoRichiedenteTipoChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IstitutoCodice", DbType:="VarChar(32)")>
	Public Property IstitutoCodice() As String
		Get
			Return Me._IstitutoCodice
		End Get
		Set
			If (String.Equals(Me._IstitutoCodice, Value) = False) Then
				Me.OnIstitutoCodiceChanging(Value)
				Me.SendPropertyChanging()
				Me._IstitutoCodice = Value
				Me.SendPropertyChanged("IstitutoCodice")
				Me.OnIstitutoCodiceChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PercorsoCarceri", DbType:="Bit NOT NULL")>
	Public Property PercorsoCarceri() As Boolean
		Get
			Return Me._PercorsoCarceri
		End Get
		Set
			If ((Me._PercorsoCarceri = Value) _
						= False) Then
				Me.OnPercorsoCarceriChanging(Value)
				Me.SendPropertyChanging()
				Me._PercorsoCarceri = Value
				Me.SendPropertyChanged("PercorsoCarceri")
				Me.OnPercorsoCarceriChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PercorsoSert", DbType:="Bit NOT NULL")>
	Public Property PercorsoSert() As Boolean
		Get
			Return Me._PercorsoSert
		End Get
		Set
			If ((Me._PercorsoSert = Value) _
						= False) Then
				Me.OnPercorsoSertChanging(Value)
				Me.SendPropertyChanging()
				Me._PercorsoSert = Value
				Me.SendPropertyChanged("PercorsoSert")
				Me.OnPercorsoSertChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="RepartiRichiedentiTipiEroganti_RepartiRichiedenti", Storage:="_RepartiRichiedentiTipiEroganti", ThisKey:="TipoErogante", OtherKey:="TipoErogante", IsForeignKey:=True)>
	Public Property RepartiRichiedentiTipiEroganti() As RepartiRichiedentiTipiEroganti
		Get
			Return Me._RepartiRichiedentiTipiEroganti.Entity
		End Get
		Set
			Dim previousValue As RepartiRichiedentiTipiEroganti = Me._RepartiRichiedentiTipiEroganti.Entity
			If ((Object.Equals(previousValue, Value) = False) _
						OrElse (Me._RepartiRichiedentiTipiEroganti.HasLoadedOrAssignedValue = False)) Then
				Me.SendPropertyChanging()

				If ((previousValue Is Nothing) _
							= False) Then
					Me._RepartiRichiedentiTipiEroganti.Entity = Nothing
					previousValue.RepartiRichiedentis.Remove(Me)
				End If
				Me._RepartiRichiedentiTipiEroganti.Entity = Value
				If ((Value Is Nothing) _
							= False) Then
					Value.RepartiRichiedentis.Add(Me)
					Me._TipoErogante = Value.TipoErogante
				Else
					Me._TipoErogante = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("RepartiRichiedentiTipiEroganti")
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="RepartiRichiedentiAziendeEroganti_RepartiRichiedenti", Storage:="_RepartiRichiedentiAziendeEroganti", ThisKey:="AziendaErogante", OtherKey:="AziendaErogante", IsForeignKey:=True)>
	Public Property RepartiRichiedentiAziendeEroganti() As RepartiRichiedentiAziendeEroganti
		Get
			Return Me._RepartiRichiedentiAziendeEroganti.Entity
		End Get
		Set
			Dim previousValue As RepartiRichiedentiAziendeEroganti = Me._RepartiRichiedentiAziendeEroganti.Entity
			If ((Object.Equals(previousValue, Value) = False) _
						OrElse (Me._RepartiRichiedentiAziendeEroganti.HasLoadedOrAssignedValue = False)) Then
				Me.SendPropertyChanging()

				If ((previousValue Is Nothing) _
							= False) Then
					Me._RepartiRichiedentiAziendeEroganti.Entity = Nothing
					previousValue.RepartiRichiedentis.Remove(Me)
				End If
				Me._RepartiRichiedentiAziendeEroganti.Entity = Value
				If ((Value Is Nothing) _
							= False) Then
					Value.RepartiRichiedentis.Add(Me)
					Me._AziendaErogante = Value.AziendaErogante
				Else
					Me._AziendaErogante = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("RepartiRichiedentiAziendeEroganti")
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="RepartiRichiedentiSistemiEroganti_RepartiRichiedenti", Storage:="_RepartiRichiedentiSistemiEroganti", ThisKey:="SistemaErogante", OtherKey:="SistemaErogante", IsForeignKey:=True)>
	Public Property RepartiRichiedentiSistemiEroganti() As RepartiRichiedentiSistemiEroganti
		Get
			Return Me._RepartiRichiedentiSistemiEroganti.Entity
		End Get
		Set
			Dim previousValue As RepartiRichiedentiSistemiEroganti = Me._RepartiRichiedentiSistemiEroganti.Entity
			If ((Object.Equals(previousValue, Value) = False) _
						OrElse (Me._RepartiRichiedentiSistemiEroganti.HasLoadedOrAssignedValue = False)) Then
				Me.SendPropertyChanging()

				If ((previousValue Is Nothing) _
							= False) Then
					Me._RepartiRichiedentiSistemiEroganti.Entity = Nothing
					previousValue.RepartiRichiedentis.Remove(Me)
				End If
				Me._RepartiRichiedentiSistemiEroganti.Entity = Value
				If ((Value Is Nothing) _
							= False) Then
					Value.RepartiRichiedentis.Add(Me)
					Me._SistemaErogante = Value.SistemaErogante
				Else
					Me._SistemaErogante = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("RepartiRichiedentiSistemiEroganti")
			End If
		End Set
	End Property

	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing) _
					= False) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub

	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing) _
					= False) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="admin.RepartiRichiedentiTipiEroganti")>
Partial Public Class RepartiRichiedentiTipiEroganti
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

	Private _TipoErogante As String

	Private _RepartiRichiedentis As EntitySet(Of RepartiRichiedenti)

#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnTipoEroganteChanging(value As String)
	End Sub
	Partial Private Sub OnTipoEroganteChanged()
	End Sub
#End Region

	Public Sub New()
		MyBase.New
		Me._RepartiRichiedentis = New EntitySet(Of RepartiRichiedenti)(AddressOf Me.attach_RepartiRichiedentis, AddressOf Me.detach_RepartiRichiedentis)
		OnCreated()
	End Sub

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoErogante", DbType:="VarChar(16) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)>
	Public Property TipoErogante() As String
		Get
			Return Me._TipoErogante
		End Get
		Set
			If (String.Equals(Me._TipoErogante, Value) = False) Then
				Me.OnTipoEroganteChanging(Value)
				Me.SendPropertyChanging()
				Me._TipoErogante = Value
				Me.SendPropertyChanged("TipoErogante")
				Me.OnTipoEroganteChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="RepartiRichiedentiTipiEroganti_RepartiRichiedenti", Storage:="_RepartiRichiedentis", ThisKey:="TipoErogante", OtherKey:="TipoErogante")>
	Public Property RepartiRichiedentis() As EntitySet(Of RepartiRichiedenti)
		Get
			Return Me._RepartiRichiedentis
		End Get
		Set
			Me._RepartiRichiedentis.Assign(Value)
		End Set
	End Property

	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing) _
					= False) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub

	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing) _
					= False) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub

	Private Sub attach_RepartiRichiedentis(ByVal entity As RepartiRichiedenti)
		Me.SendPropertyChanging()
		entity.RepartiRichiedentiTipiEroganti = Me
	End Sub

	Private Sub detach_RepartiRichiedentis(ByVal entity As RepartiRichiedenti)
		Me.SendPropertyChanging()
		entity.RepartiRichiedentiTipiEroganti = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="admin.RepartiRichiedentiAziendeEroganti")>
Partial Public Class RepartiRichiedentiAziendeEroganti
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

	Private _AziendaErogante As String

	Private _RepartiRichiedentis As EntitySet(Of RepartiRichiedenti)

#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnAziendaEroganteChanging(value As String)
	End Sub
	Partial Private Sub OnAziendaEroganteChanged()
	End Sub
#End Region

	Public Sub New()
		MyBase.New
		Me._RepartiRichiedentis = New EntitySet(Of RepartiRichiedenti)(AddressOf Me.attach_RepartiRichiedentis, AddressOf Me.detach_RepartiRichiedentis)
		OnCreated()
	End Sub

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AziendaErogante", DbType:="VarChar(16) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)>
	Public Property AziendaErogante() As String
		Get
			Return Me._AziendaErogante
		End Get
		Set
			If (String.Equals(Me._AziendaErogante, Value) = False) Then
				Me.OnAziendaEroganteChanging(Value)
				Me.SendPropertyChanging()
				Me._AziendaErogante = Value
				Me.SendPropertyChanged("AziendaErogante")
				Me.OnAziendaEroganteChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="RepartiRichiedentiAziendeEroganti_RepartiRichiedenti", Storage:="_RepartiRichiedentis", ThisKey:="AziendaErogante", OtherKey:="AziendaErogante")>
	Public Property RepartiRichiedentis() As EntitySet(Of RepartiRichiedenti)
		Get
			Return Me._RepartiRichiedentis
		End Get
		Set
			Me._RepartiRichiedentis.Assign(Value)
		End Set
	End Property

	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing) _
					= False) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub

	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing) _
					= False) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub

	Private Sub attach_RepartiRichiedentis(ByVal entity As RepartiRichiedenti)
		Me.SendPropertyChanging()
		entity.RepartiRichiedentiAziendeEroganti = Me
	End Sub

	Private Sub detach_RepartiRichiedentis(ByVal entity As RepartiRichiedenti)
		Me.SendPropertyChanging()
		entity.RepartiRichiedentiAziendeEroganti = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="admin.RepartiRichiedentiSistemiEroganti")>
Partial Public Class RepartiRichiedentiSistemiEroganti
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

	Private _SistemaErogante As String

	Private _RepartiRichiedentis As EntitySet(Of RepartiRichiedenti)

#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnSistemaEroganteChanging(value As String)
	End Sub
	Partial Private Sub OnSistemaEroganteChanged()
	End Sub
#End Region

	Public Sub New()
		MyBase.New
		Me._RepartiRichiedentis = New EntitySet(Of RepartiRichiedenti)(AddressOf Me.attach_RepartiRichiedentis, AddressOf Me.detach_RepartiRichiedentis)
		OnCreated()
	End Sub

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SistemaErogante", DbType:="VarChar(16) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)>
	Public Property SistemaErogante() As String
		Get
			Return Me._SistemaErogante
		End Get
		Set
			If (String.Equals(Me._SistemaErogante, Value) = False) Then
				Me.OnSistemaEroganteChanging(Value)
				Me.SendPropertyChanging()
				Me._SistemaErogante = Value
				Me.SendPropertyChanged("SistemaErogante")
				Me.OnSistemaEroganteChanged()
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="RepartiRichiedentiSistemiEroganti_RepartiRichiedenti", Storage:="_RepartiRichiedentis", ThisKey:="SistemaErogante", OtherKey:="SistemaErogante")>
	Public Property RepartiRichiedentis() As EntitySet(Of RepartiRichiedenti)
		Get
			Return Me._RepartiRichiedentis
		End Get
		Set
			Me._RepartiRichiedentis.Assign(Value)
		End Set
	End Property

	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing) _
					= False) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub

	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing) _
					= False) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub

	Private Sub attach_RepartiRichiedentis(ByVal entity As RepartiRichiedenti)
		Me.SendPropertyChanging()
		entity.RepartiRichiedentiSistemiEroganti = Me
	End Sub

	Private Sub detach_RepartiRichiedentis(ByVal entity As RepartiRichiedenti)
		Me.SendPropertyChanging()
		entity.RepartiRichiedentiSistemiEroganti = Nothing
	End Sub
End Class
