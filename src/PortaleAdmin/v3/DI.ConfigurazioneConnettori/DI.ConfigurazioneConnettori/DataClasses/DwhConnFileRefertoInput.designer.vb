'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="AuslAsmnRe_DwhConnFileRefertoInput")>  _
Partial Public Class DwhConnFileRefertoInputDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertSistemiEroganti_Aziende(instance As SistemiEroganti_Aziende)
    End Sub
  Partial Private Sub UpdateSistemiEroganti_Aziende(instance As SistemiEroganti_Aziende)
    End Sub
  Partial Private Sub DeleteSistemiEroganti_Aziende(instance As SistemiEroganti_Aziende)
    End Sub
  Partial Private Sub InsertSistemiEroganti_Sistemi(instance As SistemiEroganti_Sistemi)
    End Sub
  Partial Private Sub UpdateSistemiEroganti_Sistemi(instance As SistemiEroganti_Sistemi)
    End Sub
  Partial Private Sub DeleteSistemiEroganti_Sistemi(instance As SistemiEroganti_Sistemi)
    End Sub
  Partial Private Sub Insertfri_SistemiEroganti(instance As fri_SistemiEroganti)
    End Sub
  Partial Private Sub Updatefri_SistemiEroganti(instance As fri_SistemiEroganti)
    End Sub
  Partial Private Sub Deletefri_SistemiEroganti(instance As fri_SistemiEroganti)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("AuslAsmnRe_DwhConnFileRefertoInputConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property SistemiEroganti_Aziende() As System.Data.Linq.Table(Of SistemiEroganti_Aziende)
		Get
			Return Me.GetTable(Of SistemiEroganti_Aziende)
		End Get
	End Property
	
	Public ReadOnly Property SistemiEroganti_Sistemi() As System.Data.Linq.Table(Of SistemiEroganti_Sistemi)
		Get
			Return Me.GetTable(Of SistemiEroganti_Sistemi)
		End Get
	End Property
	
	Public ReadOnly Property fri_SistemiErogantis() As System.Data.Linq.Table(Of fri_SistemiEroganti)
		Get
			Return Me.GetTable(Of fri_SistemiEroganti)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="admin.SistemiErogantiAziende")>  _
Partial Public Class SistemiEroganti_Aziende
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Azienda As String
	
	Private _SistemiEroganti As EntitySet(Of fri_SistemiEroganti)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAziendaChanging(value As String)
    End Sub
    Partial Private Sub OnAziendaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SistemiEroganti = New EntitySet(Of fri_SistemiEroganti)(AddressOf Me.attach_SistemiEroganti, AddressOf Me.detach_SistemiEroganti)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Azienda", DbType:="VarChar(16) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Azienda() As String
		Get
			Return Me._Azienda
		End Get
		Set
			If (String.Equals(Me._Azienda, value) = false) Then
				Me.OnAziendaChanging(value)
				Me.SendPropertyChanging
				Me._Azienda = value
				Me.SendPropertyChanged("Azienda")
				Me.OnAziendaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SistemiEroganti_Aziende_SistemiEroganti", Storage:="_SistemiEroganti", ThisKey:="Azienda", OtherKey:="Azienda")>  _
	Public Property SistemiEroganti() As EntitySet(Of fri_SistemiEroganti)
		Get
			Return Me._SistemiEroganti
		End Get
		Set
			Me._SistemiEroganti.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_SistemiEroganti(ByVal entity As fri_SistemiEroganti)
		Me.SendPropertyChanging
		entity.SistemiEroganti_Aziende = Me
	End Sub
	
	Private Sub detach_SistemiEroganti(ByVal entity As fri_SistemiEroganti)
		Me.SendPropertyChanging
		entity.SistemiEroganti_Aziende = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="admin.SistemiErogantiSistemi")>  _
Partial Public Class SistemiEroganti_Sistemi
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Sistema As String
	
	Private _SistemiEroganti As EntitySet(Of fri_SistemiEroganti)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSistemaChanging(value As String)
    End Sub
    Partial Private Sub OnSistemaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SistemiEroganti = New EntitySet(Of fri_SistemiEroganti)(AddressOf Me.attach_SistemiEroganti, AddressOf Me.detach_SistemiEroganti)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sistema", DbType:="VarChar(16) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Sistema() As String
		Get
			Return Me._Sistema
		End Get
		Set
			If (String.Equals(Me._Sistema, value) = false) Then
				Me.OnSistemaChanging(value)
				Me.SendPropertyChanging
				Me._Sistema = value
				Me.SendPropertyChanged("Sistema")
				Me.OnSistemaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SistemiEroganti_Sistemi_SistemiEroganti", Storage:="_SistemiEroganti", ThisKey:="Sistema", OtherKey:="Sistema")>  _
	Public Property SistemiEroganti() As EntitySet(Of fri_SistemiEroganti)
		Get
			Return Me._SistemiEroganti
		End Get
		Set
			Me._SistemiEroganti.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_SistemiEroganti(ByVal entity As fri_SistemiEroganti)
		Me.SendPropertyChanging
		entity.SistemiEroganti_Sistemi = Me
	End Sub
	
	Private Sub detach_SistemiEroganti(ByVal entity As fri_SistemiEroganti)
		Me.SendPropertyChanging
		entity.SistemiEroganti_Sistemi = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SistemiEroganti")>  _
Partial Public Class fri_SistemiEroganti
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Azienda As String
	
	Private _Sistema As String
	
	Private _PrefissoIdEsterno As String
	
	Private _StiveVisualizzazione As String
	
	Private _OrdineInvio As Short
	
	Private _MaxSizeMB As Short
	
	Private _SistemiEroganti_Sistemi As EntityRef(Of SistemiEroganti_Sistemi)
	
	Private _SistemiEroganti_Aziende As EntityRef(Of SistemiEroganti_Aziende)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAziendaChanging(value As String)
    End Sub
    Partial Private Sub OnAziendaChanged()
    End Sub
    Partial Private Sub OnSistemaChanging(value As String)
    End Sub
    Partial Private Sub OnSistemaChanged()
    End Sub
    Partial Private Sub OnPrefissoIdEsternoChanging(value As String)
    End Sub
    Partial Private Sub OnPrefissoIdEsternoChanged()
    End Sub
    Partial Private Sub OnStiveVisualizzazioneChanging(value As String)
    End Sub
    Partial Private Sub OnStiveVisualizzazioneChanged()
    End Sub
    Partial Private Sub OnOrdineInvioChanging(value As Short)
    End Sub
    Partial Private Sub OnOrdineInvioChanged()
    End Sub
    Partial Private Sub OnMaxSizeMBChanging(value As Short)
    End Sub
    Partial Private Sub OnMaxSizeMBChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SistemiEroganti_Sistemi = CType(Nothing, EntityRef(Of SistemiEroganti_Sistemi))
		Me._SistemiEroganti_Aziende = CType(Nothing, EntityRef(Of SistemiEroganti_Aziende))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Azienda", DbType:="VarChar(16) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Azienda() As String
		Get
			Return Me._Azienda
		End Get
		Set
			If (String.Equals(Me._Azienda, value) = false) Then
				If Me._SistemiEroganti_Aziende.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAziendaChanging(value)
				Me.SendPropertyChanging
				Me._Azienda = value
				Me.SendPropertyChanged("Azienda")
				Me.OnAziendaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sistema", DbType:="VarChar(16) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Sistema() As String
		Get
			Return Me._Sistema
		End Get
		Set
			If (String.Equals(Me._Sistema, value) = false) Then
				If Me._SistemiEroganti_Sistemi.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSistemaChanging(value)
				Me.SendPropertyChanging
				Me._Sistema = value
				Me.SendPropertyChanged("Sistema")
				Me.OnSistemaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrefissoIdEsterno", DbType:="VarChar(16) NOT NULL", CanBeNull:=false)>  _
	Public Property PrefissoIdEsterno() As String
		Get
			Return Me._PrefissoIdEsterno
		End Get
		Set
			If (String.Equals(Me._PrefissoIdEsterno, value) = false) Then
				Me.OnPrefissoIdEsternoChanging(value)
				Me.SendPropertyChanging
				Me._PrefissoIdEsterno = value
				Me.SendPropertyChanged("PrefissoIdEsterno")
				Me.OnPrefissoIdEsternoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StiveVisualizzazione", DbType:="VarChar(16)")>  _
	Public Property StiveVisualizzazione() As String
		Get
			Return Me._StiveVisualizzazione
		End Get
		Set
			If (String.Equals(Me._StiveVisualizzazione, value) = false) Then
				Me.OnStiveVisualizzazioneChanging(value)
				Me.SendPropertyChanging
				Me._StiveVisualizzazione = value
				Me.SendPropertyChanged("StiveVisualizzazione")
				Me.OnStiveVisualizzazioneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrdineInvio", DbType:="SmallInt NOT NULL")>  _
	Public Property OrdineInvio() As Short
		Get
			Return Me._OrdineInvio
		End Get
		Set
			If ((Me._OrdineInvio = value)  _
						= false) Then
				Me.OnOrdineInvioChanging(value)
				Me.SendPropertyChanging
				Me._OrdineInvio = value
				Me.SendPropertyChanged("OrdineInvio")
				Me.OnOrdineInvioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaxSizeMB", DbType:="SmallInt NOT NULL")>  _
	Public Property MaxSizeMB() As Short
		Get
			Return Me._MaxSizeMB
		End Get
		Set
			If ((Me._MaxSizeMB = value)  _
						= false) Then
				Me.OnMaxSizeMBChanging(value)
				Me.SendPropertyChanging
				Me._MaxSizeMB = value
				Me.SendPropertyChanged("MaxSizeMB")
				Me.OnMaxSizeMBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SistemiEroganti_Sistemi_SistemiEroganti", Storage:="_SistemiEroganti_Sistemi", ThisKey:="Sistema", OtherKey:="Sistema", IsForeignKey:=true)>  _
	Public Property SistemiEroganti_Sistemi() As SistemiEroganti_Sistemi
		Get
			Return Me._SistemiEroganti_Sistemi.Entity
		End Get
		Set
			Dim previousValue As SistemiEroganti_Sistemi = Me._SistemiEroganti_Sistemi.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SistemiEroganti_Sistemi.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SistemiEroganti_Sistemi.Entity = Nothing
					previousValue.SistemiEroganti.Remove(Me)
				End If
				Me._SistemiEroganti_Sistemi.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SistemiEroganti.Add(Me)
					Me._Sistema = value.Sistema
				Else
					Me._Sistema = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("SistemiEroganti_Sistemi")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SistemiEroganti_Aziende_SistemiEroganti", Storage:="_SistemiEroganti_Aziende", ThisKey:="Azienda", OtherKey:="Azienda", IsForeignKey:=true)>  _
	Public Property SistemiEroganti_Aziende() As SistemiEroganti_Aziende
		Get
			Return Me._SistemiEroganti_Aziende.Entity
		End Get
		Set
			Dim previousValue As SistemiEroganti_Aziende = Me._SistemiEroganti_Aziende.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SistemiEroganti_Aziende.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SistemiEroganti_Aziende.Entity = Nothing
					previousValue.SistemiEroganti.Remove(Me)
				End If
				Me._SistemiEroganti_Aziende.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SistemiEroganti.Add(Me)
					Me._Azienda = value.Azienda
				Else
					Me._Azienda = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("SistemiEroganti_Aziende")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
