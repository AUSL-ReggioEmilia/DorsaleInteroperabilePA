'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection

Namespace OeGestioneOrdiniErogante

    <Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="AuslAsmnRe_OeGestioneOrdiniErogante")>
    Partial Public Class OeGestioneOrdiniEroganteDataContext
        Inherits System.Data.Linq.DataContext

        Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()

#Region "Extensibility Method Definitions"
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub InsertSistemi(instance As Sistemi)
        End Sub
        Partial Private Sub UpdateSistemi(instance As Sistemi)
        End Sub
        Partial Private Sub DeleteSistemi(instance As Sistemi)
        End Sub
        Partial Private Sub InsertSistemiCodiciAziende(instance As SistemiCodiciAziende)
        End Sub
        Partial Private Sub UpdateSistemiCodiciAziende(instance As SistemiCodiciAziende)
        End Sub
        Partial Private Sub DeleteSistemiCodiciAziende(instance As SistemiCodiciAziende)
        End Sub
        Partial Private Sub InsertDatiAccessori(instance As DatiAccessori)
        End Sub
        Partial Private Sub UpdateDatiAccessori(instance As DatiAccessori)
        End Sub
        Partial Private Sub DeleteDatiAccessori(instance As DatiAccessori)
        End Sub
        Partial Private Sub InsertDatiAccessoriSistemi(instance As DatiAccessoriSistemi)
        End Sub
        Partial Private Sub UpdateDatiAccessoriSistemi(instance As DatiAccessoriSistemi)
        End Sub
        Partial Private Sub DeleteDatiAccessoriSistemi(instance As DatiAccessoriSistemi)
        End Sub
        Partial Private Sub InsertTipiDatiAccessori(instance As TipiDatiAccessori)
        End Sub
        Partial Private Sub UpdateTipiDatiAccessori(instance As TipiDatiAccessori)
        End Sub
        Partial Private Sub DeleteTipiDatiAccessori(instance As TipiDatiAccessori)
        End Sub
        Partial Private Sub InsertPrestazioni(instance As Prestazioni)
        End Sub
        Partial Private Sub UpdatePrestazioni(instance As Prestazioni)
        End Sub
        Partial Private Sub DeletePrestazioni(instance As Prestazioni)
        End Sub
        Partial Private Sub InsertDatiAccessoriPrestazioni(instance As DatiAccessoriPrestazioni)
        End Sub
        Partial Private Sub UpdateDatiAccessoriPrestazioni(instance As DatiAccessoriPrestazioni)
        End Sub
        Partial Private Sub DeleteDatiAccessoriPrestazioni(instance As DatiAccessoriPrestazioni)
        End Sub
#End Region

        Public Sub New()
            MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("AuslAsmnRe_OeGestioneOrdiniEroganteConnectionString").ConnectionString, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(ByVal connection As String)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(ByVal connection As System.Data.IDbConnection)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public ReadOnly Property Sistemi() As System.Data.Linq.Table(Of Sistemi)
            Get
                Return Me.GetTable(Of Sistemi)
            End Get
        End Property

        Public ReadOnly Property SistemiCodiciAziende() As System.Data.Linq.Table(Of SistemiCodiciAziende)
            Get
                Return Me.GetTable(Of SistemiCodiciAziende)
            End Get
        End Property

        Public ReadOnly Property DatiAccessori() As System.Data.Linq.Table(Of DatiAccessori)
            Get
                Return Me.GetTable(Of DatiAccessori)
            End Get
        End Property

        Public ReadOnly Property DatiAccessoriSistemi() As System.Data.Linq.Table(Of DatiAccessoriSistemi)
            Get
                Return Me.GetTable(Of DatiAccessoriSistemi)
            End Get
        End Property

        Public ReadOnly Property TipiDatiAccessori() As System.Data.Linq.Table(Of TipiDatiAccessori)
            Get
                Return Me.GetTable(Of TipiDatiAccessori)
            End Get
        End Property

        Public ReadOnly Property Prestazioni() As System.Data.Linq.Table(Of Prestazioni)
            Get
                Return Me.GetTable(Of Prestazioni)
            End Get
        End Property

        Public ReadOnly Property DatiAccessoriPrestazioni() As System.Data.Linq.Table(Of DatiAccessoriPrestazioni)
            Get
                Return Me.GetTable(Of DatiAccessoriPrestazioni)
            End Get
        End Property
    End Class

    <Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Sistemi")>
    Partial Public Class Sistemi
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _ID As System.Guid

        Private _Codice As String

        Private _CodiceAzienda As String

        Private _Attivo As Boolean

        Private _CancellazionePostInoltro As Boolean

        Private _CancellazionePostInCarico As Boolean

        Private _DatiAccessoriSistemi As EntitySet(Of DatiAccessoriSistemi)

        Private _Prestazioni As EntitySet(Of Prestazioni)

        Private _SistemiCodiciAziende As EntityRef(Of SistemiCodiciAziende)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnIDChanging(value As System.Guid)
        End Sub
        Partial Private Sub OnIDChanged()
        End Sub
        Partial Private Sub OnCodiceChanging(value As String)
        End Sub
        Partial Private Sub OnCodiceChanged()
        End Sub
        Partial Private Sub OnCodiceAziendaChanging(value As String)
        End Sub
        Partial Private Sub OnCodiceAziendaChanged()
        End Sub
        Partial Private Sub OnAttivoChanging(value As Boolean)
        End Sub
        Partial Private Sub OnAttivoChanged()
        End Sub
        Partial Private Sub OnCancellazionePostInoltroChanging(value As Boolean)
        End Sub
        Partial Private Sub OnCancellazionePostInoltroChanged()
        End Sub
        Partial Private Sub OnCancellazionePostInCaricoChanging(value As Boolean)
        End Sub
        Partial Private Sub OnCancellazionePostInCaricoChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New
            Me._DatiAccessoriSistemi = New EntitySet(Of DatiAccessoriSistemi)(AddressOf Me.attach_DatiAccessoriSistemi, AddressOf Me.detach_DatiAccessoriSistemi)
            Me._Prestazioni = New EntitySet(Of Prestazioni)(AddressOf Me.attach_Prestazioni, AddressOf Me.detach_Prestazioni)
            Me._SistemiCodiciAziende = CType(Nothing, EntityRef(Of SistemiCodiciAziende))
            OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True, IsDbGenerated:=True)>
        Public Property ID() As System.Guid
            Get
                Return Me._ID
            End Get
            Set
                If ((Me._ID = Value) _
                            = False) Then
                    Me.OnIDChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ID = Value
                    Me.SendPropertyChanged("ID")
                    Me.OnIDChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codice", DbType:="VarChar(16) NOT NULL", CanBeNull:=False)>
        Public Property Codice() As String
            Get
                Return Me._Codice
            End Get
            Set
                If (String.Equals(Me._Codice, Value) = False) Then
                    Me.OnCodiceChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Codice = Value
                    Me.SendPropertyChanged("Codice")
                    Me.OnCodiceChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodiceAzienda", DbType:="VarChar(16) NOT NULL", CanBeNull:=False)>
        Public Property CodiceAzienda() As String
            Get
                Return Me._CodiceAzienda
            End Get
            Set
                If (String.Equals(Me._CodiceAzienda, Value) = False) Then
                    If Me._SistemiCodiciAziende.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If
                    Me.OnCodiceAziendaChanging(Value)
                    Me.SendPropertyChanging()
                    Me._CodiceAzienda = Value
                    Me.SendPropertyChanged("CodiceAzienda")
                    Me.OnCodiceAziendaChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Attivo", DbType:="Bit NOT NULL")>
        Public Property Attivo() As Boolean
            Get
                Return Me._Attivo
            End Get
            Set
                If ((Me._Attivo = Value) _
                            = False) Then
                    Me.OnAttivoChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Attivo = Value
                    Me.SendPropertyChanged("Attivo")
                    Me.OnAttivoChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CancellazionePostInoltro", DbType:="Bit NOT NULL")>
        Public Property CancellazionePostInoltro() As Boolean
            Get
                Return Me._CancellazionePostInoltro
            End Get
            Set
                If ((Me._CancellazionePostInoltro = Value) _
                            = False) Then
                    Me.OnCancellazionePostInoltroChanging(Value)
                    Me.SendPropertyChanging()
                    Me._CancellazionePostInoltro = Value
                    Me.SendPropertyChanged("CancellazionePostInoltro")
                    Me.OnCancellazionePostInoltroChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CancellazionePostInCarico", DbType:="Bit NOT NULL")>
        Public Property CancellazionePostInCarico() As Boolean
            Get
                Return Me._CancellazionePostInCarico
            End Get
            Set
                If ((Me._CancellazionePostInCarico = Value) _
                            = False) Then
                    Me.OnCancellazionePostInCaricoChanging(Value)
                    Me.SendPropertyChanging()
                    Me._CancellazionePostInCarico = Value
                    Me.SendPropertyChanged("CancellazionePostInCarico")
                    Me.OnCancellazionePostInCaricoChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sistemi_DatiAccessoriSistemi", Storage:="_DatiAccessoriSistemi", ThisKey:="ID", OtherKey:="IdSistema")>
        Public Property DatiAccessoriSistemi() As EntitySet(Of DatiAccessoriSistemi)
            Get
                Return Me._DatiAccessoriSistemi
            End Get
            Set
                Me._DatiAccessoriSistemi.Assign(Value)
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sistemi_Prestazioni", Storage:="_Prestazioni", ThisKey:="ID", OtherKey:="IDSistemaErogante")>
        Public Property Prestazioni() As EntitySet(Of Prestazioni)
            Get
                Return Me._Prestazioni
            End Get
            Set
                Me._Prestazioni.Assign(Value)
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SistemiCodiciAziende_Sistemi", Storage:="_SistemiCodiciAziende", ThisKey:="CodiceAzienda", OtherKey:="CodiceAzienda", IsForeignKey:=True)>
        Public Property SistemiCodiciAziende() As SistemiCodiciAziende
            Get
                Return Me._SistemiCodiciAziende.Entity
            End Get
            Set
                Dim previousValue As SistemiCodiciAziende = Me._SistemiCodiciAziende.Entity
                If ((Object.Equals(previousValue, Value) = False) _
                            OrElse (Me._SistemiCodiciAziende.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()

                    If ((previousValue Is Nothing) _
                                = False) Then
                        Me._SistemiCodiciAziende.Entity = Nothing
                        previousValue.Sistemi.Remove(Me)
                    End If
                    Me._SistemiCodiciAziende.Entity = Value
                    If ((Value Is Nothing) _
                                = False) Then
                        Value.Sistemi.Add(Me)
                        Me._CodiceAzienda = Value.CodiceAzienda
                    Else
                        Me._CodiceAzienda = CType(Nothing, String)
                    End If
                    Me.SendPropertyChanged("SistemiCodiciAziende")
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
                        = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
                        = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Private Sub attach_DatiAccessoriSistemi(ByVal entity As DatiAccessoriSistemi)
            Me.SendPropertyChanging()
            entity.Sistemi = Me
        End Sub

        Private Sub detach_DatiAccessoriSistemi(ByVal entity As DatiAccessoriSistemi)
            Me.SendPropertyChanging()
            entity.Sistemi = Nothing
        End Sub

        Private Sub attach_Prestazioni(ByVal entity As Prestazioni)
            Me.SendPropertyChanging()
            entity.Sistemi = Me
        End Sub

        Private Sub detach_Prestazioni(ByVal entity As Prestazioni)
            Me.SendPropertyChanging()
            entity.Sistemi = Nothing
        End Sub
    End Class

    <Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SistemiCodiciAziende")>
    Partial Public Class SistemiCodiciAziende
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _CodiceAzienda As String

        Private _Sistemi As EntitySet(Of Sistemi)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnCodiceAziendaChanging(value As String)
        End Sub
        Partial Private Sub OnCodiceAziendaChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New
            Me._Sistemi = New EntitySet(Of Sistemi)(AddressOf Me.attach_Sistemi, AddressOf Me.detach_Sistemi)
            OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodiceAzienda", DbType:="VarChar(16) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)>
        Public Property CodiceAzienda() As String
            Get
                Return Me._CodiceAzienda
            End Get
            Set
                If (String.Equals(Me._CodiceAzienda, Value) = False) Then
                    Me.OnCodiceAziendaChanging(Value)
                    Me.SendPropertyChanging()
                    Me._CodiceAzienda = Value
                    Me.SendPropertyChanged("CodiceAzienda")
                    Me.OnCodiceAziendaChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SistemiCodiciAziende_Sistemi", Storage:="_Sistemi", ThisKey:="CodiceAzienda", OtherKey:="CodiceAzienda")>
        Public Property Sistemi() As EntitySet(Of Sistemi)
            Get
                Return Me._Sistemi
            End Get
            Set
                Me._Sistemi.Assign(Value)
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
                        = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
                        = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Private Sub attach_Sistemi(ByVal entity As Sistemi)
            Me.SendPropertyChanging()
            entity.SistemiCodiciAziende = Me
        End Sub

        Private Sub detach_Sistemi(ByVal entity As Sistemi)
            Me.SendPropertyChanging()
            entity.SistemiCodiciAziende = Nothing
        End Sub
    End Class

    <Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DatiAccessori")>
    Partial Public Class DatiAccessori
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _Id As System.Guid

        Private _Codice As String

        Private _DataInserimento As Date

        Private _DataModifica As Date

        Private _Descrizione As String

        Private _Etichetta As String

        Private _IdTipoDatoAccessorio As Integer

        Private _Valori As String

        Private _Ordinamento As System.Nullable(Of Integer)

        Private _Gruppo As String

        Private _ValidazioneRegex As String

        Private _ValidazioneMessaggio As String

        Private _ValoreDefault As String

        Private _UtenteInserimento As String

        Private _UtenteModifica As String

        Private _DatiAccessoriSistemi As EntitySet(Of DatiAccessoriSistemi)

        Private _DatiAccessoriPrestazioni As EntitySet(Of DatiAccessoriPrestazioni)

        Private _TipiDatiAccessori As EntityRef(Of TipiDatiAccessori)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnIdChanging(value As System.Guid)
        End Sub
        Partial Private Sub OnIdChanged()
        End Sub
        Partial Private Sub OnCodiceChanging(value As String)
        End Sub
        Partial Private Sub OnCodiceChanged()
        End Sub
        Partial Private Sub OnDataInserimentoChanging(value As Date)
        End Sub
        Partial Private Sub OnDataInserimentoChanged()
        End Sub
        Partial Private Sub OnDataModificaChanging(value As Date)
        End Sub
        Partial Private Sub OnDataModificaChanged()
        End Sub
        Partial Private Sub OnDescrizioneChanging(value As String)
        End Sub
        Partial Private Sub OnDescrizioneChanged()
        End Sub
        Partial Private Sub OnEtichettaChanging(value As String)
        End Sub
        Partial Private Sub OnEtichettaChanged()
        End Sub
        Partial Private Sub OnIdTipoDatoAccessorioChanging(value As Integer)
        End Sub
        Partial Private Sub OnIdTipoDatoAccessorioChanged()
        End Sub
        Partial Private Sub OnValoriChanging(value As String)
        End Sub
        Partial Private Sub OnValoriChanged()
        End Sub
        Partial Private Sub OnOrdinamentoChanging(value As System.Nullable(Of Integer))
        End Sub
        Partial Private Sub OnOrdinamentoChanged()
        End Sub
        Partial Private Sub OnGruppoChanging(value As String)
        End Sub
        Partial Private Sub OnGruppoChanged()
        End Sub
        Partial Private Sub OnValidazioneRegexChanging(value As String)
        End Sub
        Partial Private Sub OnValidazioneRegexChanged()
        End Sub
        Partial Private Sub OnValidazioneMessaggioChanging(value As String)
        End Sub
        Partial Private Sub OnValidazioneMessaggioChanged()
        End Sub
        Partial Private Sub OnValoreDefaultChanging(value As String)
        End Sub
        Partial Private Sub OnValoreDefaultChanged()
        End Sub
        Partial Private Sub OnUtenteInserimentoChanging(value As String)
        End Sub
        Partial Private Sub OnUtenteInserimentoChanged()
        End Sub
        Partial Private Sub OnUtenteModificaChanging(value As String)
        End Sub
        Partial Private Sub OnUtenteModificaChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New
            Me._DatiAccessoriSistemi = New EntitySet(Of DatiAccessoriSistemi)(AddressOf Me.attach_DatiAccessoriSistemi, AddressOf Me.detach_DatiAccessoriSistemi)
            Me._DatiAccessoriPrestazioni = New EntitySet(Of DatiAccessoriPrestazioni)(AddressOf Me.attach_DatiAccessoriPrestazioni, AddressOf Me.detach_DatiAccessoriPrestazioni)
            Me._TipiDatiAccessori = CType(Nothing, EntityRef(Of TipiDatiAccessori))
            OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True, IsDbGenerated:=True)>
        Public Property Id() As System.Guid
            Get
                Return Me._Id
            End Get
            Set
                If ((Me._Id = Value) _
                            = False) Then
                    Me.OnIdChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Id = Value
                    Me.SendPropertyChanged("Id")
                    Me.OnIdChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codice", DbType:="VarChar(64) NOT NULL", CanBeNull:=False)>
        Public Property Codice() As String
            Get
                Return Me._Codice
            End Get
            Set
                If (String.Equals(Me._Codice, Value) = False) Then
                    Me.OnCodiceChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Codice = Value
                    Me.SendPropertyChanged("Codice")
                    Me.OnCodiceChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataInserimento", DbType:="DateTime2 NOT NULL")>
        Public Property DataInserimento() As Date
            Get
                Return Me._DataInserimento
            End Get
            Set
                If ((Me._DataInserimento = Value) _
                            = False) Then
                    Me.OnDataInserimentoChanging(Value)
                    Me.SendPropertyChanging()
                    Me._DataInserimento = Value
                    Me.SendPropertyChanged("DataInserimento")
                    Me.OnDataInserimentoChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataModifica", DbType:="DateTime2 NOT NULL")>
        Public Property DataModifica() As Date
            Get
                Return Me._DataModifica
            End Get
            Set
                If ((Me._DataModifica = Value) _
                            = False) Then
                    Me.OnDataModificaChanging(Value)
                    Me.SendPropertyChanging()
                    Me._DataModifica = Value
                    Me.SendPropertyChanged("DataModifica")
                    Me.OnDataModificaChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descrizione", DbType:="VarChar(256)")>
        Public Property Descrizione() As String
            Get
                Return Me._Descrizione
            End Get
            Set
                If (String.Equals(Me._Descrizione, Value) = False) Then
                    Me.OnDescrizioneChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Descrizione = Value
                    Me.SendPropertyChanged("Descrizione")
                    Me.OnDescrizioneChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Etichetta", DbType:="VarChar(64) NOT NULL", CanBeNull:=False)>
        Public Property Etichetta() As String
            Get
                Return Me._Etichetta
            End Get
            Set
                If (String.Equals(Me._Etichetta, Value) = False) Then
                    Me.OnEtichettaChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Etichetta = Value
                    Me.SendPropertyChanged("Etichetta")
                    Me.OnEtichettaChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdTipoDatoAccessorio", DbType:="Int NOT NULL")>
        Public Property IdTipoDatoAccessorio() As Integer
            Get
                Return Me._IdTipoDatoAccessorio
            End Get
            Set
                If ((Me._IdTipoDatoAccessorio = Value) _
                            = False) Then
                    If Me._TipiDatiAccessori.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If
                    Me.OnIdTipoDatoAccessorioChanging(Value)
                    Me.SendPropertyChanging()
                    Me._IdTipoDatoAccessorio = Value
                    Me.SendPropertyChanged("IdTipoDatoAccessorio")
                    Me.OnIdTipoDatoAccessorioChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Valori", DbType:="VarChar(MAX)")>
        Public Property Valori() As String
            Get
                Return Me._Valori
            End Get
            Set
                If (String.Equals(Me._Valori, Value) = False) Then
                    Me.OnValoriChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Valori = Value
                    Me.SendPropertyChanged("Valori")
                    Me.OnValoriChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Ordinamento", DbType:="Int")>
        Public Property Ordinamento() As System.Nullable(Of Integer)
            Get
                Return Me._Ordinamento
            End Get
            Set
                If (Me._Ordinamento.Equals(Value) = False) Then
                    Me.OnOrdinamentoChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Ordinamento = Value
                    Me.SendPropertyChanged("Ordinamento")
                    Me.OnOrdinamentoChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Gruppo", DbType:="VarChar(64)")>
        Public Property Gruppo() As String
            Get
                Return Me._Gruppo
            End Get
            Set
                If (String.Equals(Me._Gruppo, Value) = False) Then
                    Me.OnGruppoChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Gruppo = Value
                    Me.SendPropertyChanged("Gruppo")
                    Me.OnGruppoChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ValidazioneRegex", DbType:="VarChar(MAX)")>
        Public Property ValidazioneRegex() As String
            Get
                Return Me._ValidazioneRegex
            End Get
            Set
                If (String.Equals(Me._ValidazioneRegex, Value) = False) Then
                    Me.OnValidazioneRegexChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ValidazioneRegex = Value
                    Me.SendPropertyChanged("ValidazioneRegex")
                    Me.OnValidazioneRegexChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ValidazioneMessaggio", DbType:="VarChar(MAX)")>
        Public Property ValidazioneMessaggio() As String
            Get
                Return Me._ValidazioneMessaggio
            End Get
            Set
                If (String.Equals(Me._ValidazioneMessaggio, Value) = False) Then
                    Me.OnValidazioneMessaggioChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ValidazioneMessaggio = Value
                    Me.SendPropertyChanged("ValidazioneMessaggio")
                    Me.OnValidazioneMessaggioChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ValoreDefault", DbType:="VarChar(1024)")>
        Public Property ValoreDefault() As String
            Get
                Return Me._ValoreDefault
            End Get
            Set
                If (String.Equals(Me._ValoreDefault, Value) = False) Then
                    Me.OnValoreDefaultChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ValoreDefault = Value
                    Me.SendPropertyChanged("ValoreDefault")
                    Me.OnValoreDefaultChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UtenteInserimento", DbType:="VarChar(64) NOT NULL", CanBeNull:=False)>
        Public Property UtenteInserimento() As String
            Get
                Return Me._UtenteInserimento
            End Get
            Set
                If (String.Equals(Me._UtenteInserimento, Value) = False) Then
                    Me.OnUtenteInserimentoChanging(Value)
                    Me.SendPropertyChanging()
                    Me._UtenteInserimento = Value
                    Me.SendPropertyChanged("UtenteInserimento")
                    Me.OnUtenteInserimentoChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UtenteModifica", DbType:="VarChar(64) NOT NULL", CanBeNull:=False)>
        Public Property UtenteModifica() As String
            Get
                Return Me._UtenteModifica
            End Get
            Set
                If (String.Equals(Me._UtenteModifica, Value) = False) Then
                    Me.OnUtenteModificaChanging(Value)
                    Me.SendPropertyChanging()
                    Me._UtenteModifica = Value
                    Me.SendPropertyChanged("UtenteModifica")
                    Me.OnUtenteModificaChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DatiAccessori_DatiAccessoriSistemi", Storage:="_DatiAccessoriSistemi", ThisKey:="Id", OtherKey:="IdDatoAccessorio")>
        Public Property DatiAccessoriSistemi() As EntitySet(Of DatiAccessoriSistemi)
            Get
                Return Me._DatiAccessoriSistemi
            End Get
            Set
                Me._DatiAccessoriSistemi.Assign(Value)
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DatiAccessori_DatiAccessoriPrestazioni", Storage:="_DatiAccessoriPrestazioni", ThisKey:="Id", OtherKey:="IDDatoAccessorio")>
        Public Property DatiAccessoriPrestazioni() As EntitySet(Of DatiAccessoriPrestazioni)
            Get
                Return Me._DatiAccessoriPrestazioni
            End Get
            Set
                Me._DatiAccessoriPrestazioni.Assign(Value)
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipiDatiAccessori_DatiAccessori", Storage:="_TipiDatiAccessori", ThisKey:="IdTipoDatoAccessorio", OtherKey:="Id", IsForeignKey:=True)>
        Public Property TipiDatiAccessori() As TipiDatiAccessori
            Get
                Return Me._TipiDatiAccessori.Entity
            End Get
            Set
                Dim previousValue As TipiDatiAccessori = Me._TipiDatiAccessori.Entity
                If ((Object.Equals(previousValue, Value) = False) _
                            OrElse (Me._TipiDatiAccessori.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()

                    If ((previousValue Is Nothing) _
                                = False) Then
                        Me._TipiDatiAccessori.Entity = Nothing
                        previousValue.DatiAccessori.Remove(Me)
                    End If
                    Me._TipiDatiAccessori.Entity = Value
                    If ((Value Is Nothing) _
                                = False) Then
                        Value.DatiAccessori.Add(Me)
                        Me._IdTipoDatoAccessorio = Value.Id
                    Else
                        Me._IdTipoDatoAccessorio = CType(Nothing, Integer)
                    End If
                    Me.SendPropertyChanged("TipiDatiAccessori")
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
                        = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
                        = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Private Sub attach_DatiAccessoriSistemi(ByVal entity As DatiAccessoriSistemi)
            Me.SendPropertyChanging()
            entity.DatiAccessori = Me
        End Sub

        Private Sub detach_DatiAccessoriSistemi(ByVal entity As DatiAccessoriSistemi)
            Me.SendPropertyChanging()
            entity.DatiAccessori = Nothing
        End Sub

        Private Sub attach_DatiAccessoriPrestazioni(ByVal entity As DatiAccessoriPrestazioni)
            Me.SendPropertyChanging()
            entity.DatiAccessori = Me
        End Sub

        Private Sub detach_DatiAccessoriPrestazioni(ByVal entity As DatiAccessoriPrestazioni)
            Me.SendPropertyChanging()
            entity.DatiAccessori = Nothing
        End Sub
    End Class

    <Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DatiAccessoriSistemi")>
    Partial Public Class DatiAccessoriSistemi
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _Id As System.Guid

        Private _IdDatoAccessorio As System.Guid

        Private _IdSistema As System.Guid

        Private _Attivo As Boolean

        Private _DatiAccessori As EntityRef(Of DatiAccessori)

        Private _Sistemi As EntityRef(Of Sistemi)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnIdChanging(value As System.Guid)
        End Sub
        Partial Private Sub OnIdChanged()
        End Sub
        Partial Private Sub OnIdDatoAccessorioChanging(value As System.Guid)
        End Sub
        Partial Private Sub OnIdDatoAccessorioChanged()
        End Sub
        Partial Private Sub OnIdSistemaChanging(value As System.Guid)
        End Sub
        Partial Private Sub OnIdSistemaChanged()
        End Sub
        Partial Private Sub OnAttivoChanging(value As Boolean)
        End Sub
        Partial Private Sub OnAttivoChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New
            Me._DatiAccessori = CType(Nothing, EntityRef(Of DatiAccessori))
            Me._Sistemi = CType(Nothing, EntityRef(Of Sistemi))
            OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True, IsDbGenerated:=True)>
        Public Property Id() As System.Guid
            Get
                Return Me._Id
            End Get
            Set
                If ((Me._Id = Value) _
                            = False) Then
                    Me.OnIdChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Id = Value
                    Me.SendPropertyChanged("Id")
                    Me.OnIdChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdDatoAccessorio", DbType:="UniqueIdentifier NOT NULL")>
        Public Property IdDatoAccessorio() As System.Guid
            Get
                Return Me._IdDatoAccessorio
            End Get
            Set
                If ((Me._IdDatoAccessorio = Value) _
                            = False) Then
                    If Me._DatiAccessori.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If
                    Me.OnIdDatoAccessorioChanging(Value)
                    Me.SendPropertyChanging()
                    Me._IdDatoAccessorio = Value
                    Me.SendPropertyChanged("IdDatoAccessorio")
                    Me.OnIdDatoAccessorioChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdSistema", DbType:="UniqueIdentifier NOT NULL")>
        Public Property IdSistema() As System.Guid
            Get
                Return Me._IdSistema
            End Get
            Set
                If ((Me._IdSistema = Value) _
                            = False) Then
                    If Me._Sistemi.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If
                    Me.OnIdSistemaChanging(Value)
                    Me.SendPropertyChanging()
                    Me._IdSistema = Value
                    Me.SendPropertyChanged("IdSistema")
                    Me.OnIdSistemaChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Attivo", DbType:="Bit NOT NULL")>
        Public Property Attivo() As Boolean
            Get
                Return Me._Attivo
            End Get
            Set
                If ((Me._Attivo = Value) _
                            = False) Then
                    Me.OnAttivoChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Attivo = Value
                    Me.SendPropertyChanged("Attivo")
                    Me.OnAttivoChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DatiAccessori_DatiAccessoriSistemi", Storage:="_DatiAccessori", ThisKey:="IdDatoAccessorio", OtherKey:="Id", IsForeignKey:=True)>
        Public Property DatiAccessori() As DatiAccessori
            Get
                Return Me._DatiAccessori.Entity
            End Get
            Set
                Dim previousValue As DatiAccessori = Me._DatiAccessori.Entity
                If ((Object.Equals(previousValue, Value) = False) _
                            OrElse (Me._DatiAccessori.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()

                    If ((previousValue Is Nothing) _
                                = False) Then
                        Me._DatiAccessori.Entity = Nothing
                        previousValue.DatiAccessoriSistemi.Remove(Me)
                    End If
                    Me._DatiAccessori.Entity = Value
                    If ((Value Is Nothing) _
                                = False) Then
                        Value.DatiAccessoriSistemi.Add(Me)
                        Me._IdDatoAccessorio = Value.Id
                    Else
                        Me._IdDatoAccessorio = CType(Nothing, System.Guid)
                    End If
                    Me.SendPropertyChanged("DatiAccessori")
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sistemi_DatiAccessoriSistemi", Storage:="_Sistemi", ThisKey:="IdSistema", OtherKey:="ID", IsForeignKey:=True)>
        Public Property Sistemi() As Sistemi
            Get
                Return Me._Sistemi.Entity
            End Get
            Set
                Dim previousValue As Sistemi = Me._Sistemi.Entity
                If ((Object.Equals(previousValue, Value) = False) _
                            OrElse (Me._Sistemi.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()

                    If ((previousValue Is Nothing) _
                                = False) Then
                        Me._Sistemi.Entity = Nothing
                        previousValue.DatiAccessoriSistemi.Remove(Me)
                    End If
                    Me._Sistemi.Entity = Value
                    If ((Value Is Nothing) _
                                = False) Then
                        Value.DatiAccessoriSistemi.Add(Me)
                        Me._IdSistema = Value.ID
                    Else
                        Me._IdSistema = CType(Nothing, System.Guid)
                    End If
                    Me.SendPropertyChanged("Sistemi")
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
                        = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
                        = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class

    <Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TipiDatiAccessori")>
    Partial Public Class TipiDatiAccessori
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _Id As Integer

        Private _Codice As String

        Private _Descrizione As String

        Private _Ordine As Integer

        Private _Attivo As Boolean

        Private _DatiAccessori As EntitySet(Of DatiAccessori)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnIdChanging(value As Integer)
        End Sub
        Partial Private Sub OnIdChanged()
        End Sub
        Partial Private Sub OnCodiceChanging(value As String)
        End Sub
        Partial Private Sub OnCodiceChanged()
        End Sub
        Partial Private Sub OnDescrizioneChanging(value As String)
        End Sub
        Partial Private Sub OnDescrizioneChanged()
        End Sub
        Partial Private Sub OnOrdineChanging(value As Integer)
        End Sub
        Partial Private Sub OnOrdineChanged()
        End Sub
        Partial Private Sub OnAttivoChanging(value As Boolean)
        End Sub
        Partial Private Sub OnAttivoChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New
            Me._DatiAccessori = New EntitySet(Of DatiAccessori)(AddressOf Me.attach_DatiAccessori, AddressOf Me.detach_DatiAccessori)
            OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="Int NOT NULL", IsPrimaryKey:=True)>
        Public Property Id() As Integer
            Get
                Return Me._Id
            End Get
            Set
                If ((Me._Id = Value) _
                            = False) Then
                    Me.OnIdChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Id = Value
                    Me.SendPropertyChanged("Id")
                    Me.OnIdChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codice", DbType:="VarChar(50) NOT NULL", CanBeNull:=False)>
        Public Property Codice() As String
            Get
                Return Me._Codice
            End Get
            Set
                If (String.Equals(Me._Codice, Value) = False) Then
                    Me.OnCodiceChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Codice = Value
                    Me.SendPropertyChanged("Codice")
                    Me.OnCodiceChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descrizione", DbType:="VarChar(50) NOT NULL", CanBeNull:=False)>
        Public Property Descrizione() As String
            Get
                Return Me._Descrizione
            End Get
            Set
                If (String.Equals(Me._Descrizione, Value) = False) Then
                    Me.OnDescrizioneChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Descrizione = Value
                    Me.SendPropertyChanged("Descrizione")
                    Me.OnDescrizioneChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Ordine", DbType:="Int NOT NULL")>
        Public Property Ordine() As Integer
            Get
                Return Me._Ordine
            End Get
            Set
                If ((Me._Ordine = Value) _
                            = False) Then
                    Me.OnOrdineChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Ordine = Value
                    Me.SendPropertyChanged("Ordine")
                    Me.OnOrdineChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Attivo", DbType:="Bit NOT NULL")>
        Public Property Attivo() As Boolean
            Get
                Return Me._Attivo
            End Get
            Set
                If ((Me._Attivo = Value) _
                            = False) Then
                    Me.OnAttivoChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Attivo = Value
                    Me.SendPropertyChanged("Attivo")
                    Me.OnAttivoChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipiDatiAccessori_DatiAccessori", Storage:="_DatiAccessori", ThisKey:="Id", OtherKey:="IdTipoDatoAccessorio")>
        Public Property DatiAccessori() As EntitySet(Of DatiAccessori)
            Get
                Return Me._DatiAccessori
            End Get
            Set
                Me._DatiAccessori.Assign(Value)
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
                        = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
                        = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Private Sub attach_DatiAccessori(ByVal entity As DatiAccessori)
            Me.SendPropertyChanging()
            entity.TipiDatiAccessori = Me
        End Sub

        Private Sub detach_DatiAccessori(ByVal entity As DatiAccessori)
            Me.SendPropertyChanging()
            entity.TipiDatiAccessori = Nothing
        End Sub
    End Class

    <Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Prestazioni")>
    Partial Public Class Prestazioni
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _ID As System.Guid

        Private _DataInserimento As Date

        Private _DataModifica As Date

        Private _Codice As String

        Private _Descrizione As String

        Private _IDSistemaErogante As System.Guid

        Private _Attivo As Boolean

        Private _UtenteInserimento As String

        Private _UtenteModifica As String

        Private _DatiAccessoriPrestazioni As EntitySet(Of DatiAccessoriPrestazioni)

        Private _Sistemi As EntityRef(Of Sistemi)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnIDChanging(value As System.Guid)
        End Sub
        Partial Private Sub OnIDChanged()
        End Sub
        Partial Private Sub OnDataInserimentoChanging(value As Date)
        End Sub
        Partial Private Sub OnDataInserimentoChanged()
        End Sub
        Partial Private Sub OnDataModificaChanging(value As Date)
        End Sub
        Partial Private Sub OnDataModificaChanged()
        End Sub
        Partial Private Sub OnCodiceChanging(value As String)
        End Sub
        Partial Private Sub OnCodiceChanged()
        End Sub
        Partial Private Sub OnDescrizioneChanging(value As String)
        End Sub
        Partial Private Sub OnDescrizioneChanged()
        End Sub
        Partial Private Sub OnIDSistemaEroganteChanging(value As System.Guid)
        End Sub
        Partial Private Sub OnIDSistemaEroganteChanged()
        End Sub
        Partial Private Sub OnAttivoChanging(value As Boolean)
        End Sub
        Partial Private Sub OnAttivoChanged()
        End Sub
        Partial Private Sub OnUtenteInserimentoChanging(value As String)
        End Sub
        Partial Private Sub OnUtenteInserimentoChanged()
        End Sub
        Partial Private Sub OnUtenteModificaChanging(value As String)
        End Sub
        Partial Private Sub OnUtenteModificaChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New
            Me._DatiAccessoriPrestazioni = New EntitySet(Of DatiAccessoriPrestazioni)(AddressOf Me.attach_DatiAccessoriPrestazioni, AddressOf Me.detach_DatiAccessoriPrestazioni)
            Me._Sistemi = CType(Nothing, EntityRef(Of Sistemi))
            OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True, IsDbGenerated:=True)>
        Public Property ID() As System.Guid
            Get
                Return Me._ID
            End Get
            Set
                If ((Me._ID = Value) _
                            = False) Then
                    Me.OnIDChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ID = Value
                    Me.SendPropertyChanged("ID")
                    Me.OnIDChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataInserimento", DbType:="DateTime2 NOT NULL")>
        Public Property DataInserimento() As Date
            Get
                Return Me._DataInserimento
            End Get
            Set
                If ((Me._DataInserimento = Value) _
                            = False) Then
                    Me.OnDataInserimentoChanging(Value)
                    Me.SendPropertyChanging()
                    Me._DataInserimento = Value
                    Me.SendPropertyChanged("DataInserimento")
                    Me.OnDataInserimentoChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataModifica", DbType:="DateTime2 NOT NULL")>
        Public Property DataModifica() As Date
            Get
                Return Me._DataModifica
            End Get
            Set
                If ((Me._DataModifica = Value) _
                            = False) Then
                    Me.OnDataModificaChanging(Value)
                    Me.SendPropertyChanging()
                    Me._DataModifica = Value
                    Me.SendPropertyChanged("DataModifica")
                    Me.OnDataModificaChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Codice", DbType:="VarChar(16) NOT NULL", CanBeNull:=False)>
        Public Property Codice() As String
            Get
                Return Me._Codice
            End Get
            Set
                If (String.Equals(Me._Codice, Value) = False) Then
                    Me.OnCodiceChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Codice = Value
                    Me.SendPropertyChanged("Codice")
                    Me.OnCodiceChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descrizione", DbType:="VarChar(256)")>
        Public Property Descrizione() As String
            Get
                Return Me._Descrizione
            End Get
            Set
                If (String.Equals(Me._Descrizione, Value) = False) Then
                    Me.OnDescrizioneChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Descrizione = Value
                    Me.SendPropertyChanged("Descrizione")
                    Me.OnDescrizioneChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDSistemaErogante", DbType:="UniqueIdentifier NOT NULL")>
        Public Property IDSistemaErogante() As System.Guid
            Get
                Return Me._IDSistemaErogante
            End Get
            Set
                If ((Me._IDSistemaErogante = Value) _
                            = False) Then
                    If Me._Sistemi.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If
                    Me.OnIDSistemaEroganteChanging(Value)
                    Me.SendPropertyChanging()
                    Me._IDSistemaErogante = Value
                    Me.SendPropertyChanged("IDSistemaErogante")
                    Me.OnIDSistemaEroganteChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Attivo", DbType:="Bit NOT NULL")>
        Public Property Attivo() As Boolean
            Get
                Return Me._Attivo
            End Get
            Set
                If ((Me._Attivo = Value) _
                            = False) Then
                    Me.OnAttivoChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Attivo = Value
                    Me.SendPropertyChanged("Attivo")
                    Me.OnAttivoChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UtenteInserimento", DbType:="VarChar(64) NOT NULL", CanBeNull:=False)>
        Public Property UtenteInserimento() As String
            Get
                Return Me._UtenteInserimento
            End Get
            Set
                If (String.Equals(Me._UtenteInserimento, Value) = False) Then
                    Me.OnUtenteInserimentoChanging(Value)
                    Me.SendPropertyChanging()
                    Me._UtenteInserimento = Value
                    Me.SendPropertyChanged("UtenteInserimento")
                    Me.OnUtenteInserimentoChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UtenteModifica", DbType:="VarChar(64) NOT NULL", CanBeNull:=False)>
        Public Property UtenteModifica() As String
            Get
                Return Me._UtenteModifica
            End Get
            Set
                If (String.Equals(Me._UtenteModifica, Value) = False) Then
                    Me.OnUtenteModificaChanging(Value)
                    Me.SendPropertyChanging()
                    Me._UtenteModifica = Value
                    Me.SendPropertyChanged("UtenteModifica")
                    Me.OnUtenteModificaChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Prestazioni_DatiAccessoriPrestazioni", Storage:="_DatiAccessoriPrestazioni", ThisKey:="ID", OtherKey:="IDPrestazione")>
        Public Property DatiAccessoriPrestazioni() As EntitySet(Of DatiAccessoriPrestazioni)
            Get
                Return Me._DatiAccessoriPrestazioni
            End Get
            Set
                Me._DatiAccessoriPrestazioni.Assign(Value)
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sistemi_Prestazioni", Storage:="_Sistemi", ThisKey:="IDSistemaErogante", OtherKey:="ID", IsForeignKey:=True)>
        Public Property Sistemi() As Sistemi
            Get
                Return Me._Sistemi.Entity
            End Get
            Set
                Dim previousValue As Sistemi = Me._Sistemi.Entity
                If ((Object.Equals(previousValue, Value) = False) _
                            OrElse (Me._Sistemi.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()

                    If ((previousValue Is Nothing) _
                                = False) Then
                        Me._Sistemi.Entity = Nothing
                        previousValue.Prestazioni.Remove(Me)
                    End If
                    Me._Sistemi.Entity = Value
                    If ((Value Is Nothing) _
                                = False) Then
                        Value.Prestazioni.Add(Me)
                        Me._IDSistemaErogante = Value.ID
                    Else
                        Me._IDSistemaErogante = CType(Nothing, System.Guid)
                    End If
                    Me.SendPropertyChanged("Sistemi")
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
                        = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
                        = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Private Sub attach_DatiAccessoriPrestazioni(ByVal entity As DatiAccessoriPrestazioni)
            Me.SendPropertyChanging()
            entity.Prestazioni = Me
        End Sub

        Private Sub detach_DatiAccessoriPrestazioni(ByVal entity As DatiAccessoriPrestazioni)
            Me.SendPropertyChanging()
            entity.Prestazioni = Nothing
        End Sub
    End Class

    <Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DatiAccessoriPrestazioni")>
    Partial Public Class DatiAccessoriPrestazioni
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _ID As System.Guid

        Private _IDDatoAccessorio As System.Guid

        Private _IDPrestazione As System.Guid

        Private _Attivo As Boolean

        Private _DatiAccessori As EntityRef(Of DatiAccessori)

        Private _Prestazioni As EntityRef(Of Prestazioni)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnIDChanging(value As System.Guid)
        End Sub
        Partial Private Sub OnIDChanged()
        End Sub
        Partial Private Sub OnIDDatoAccessorioChanging(value As System.Guid)
        End Sub
        Partial Private Sub OnIDDatoAccessorioChanged()
        End Sub
        Partial Private Sub OnIDPrestazioneChanging(value As System.Guid)
        End Sub
        Partial Private Sub OnIDPrestazioneChanged()
        End Sub
        Partial Private Sub OnAttivoChanging(value As Boolean)
        End Sub
        Partial Private Sub OnAttivoChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New
            Me._DatiAccessori = CType(Nothing, EntityRef(Of DatiAccessori))
            Me._Prestazioni = CType(Nothing, EntityRef(Of Prestazioni))
            OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True, IsDbGenerated:=True)>
        Public Property ID() As System.Guid
            Get
                Return Me._ID
            End Get
            Set
                If ((Me._ID = Value) _
                            = False) Then
                    Me.OnIDChanging(Value)
                    Me.SendPropertyChanging()
                    Me._ID = Value
                    Me.SendPropertyChanged("ID")
                    Me.OnIDChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDDatoAccessorio", DbType:="UniqueIdentifier NOT NULL")>
        Public Property IDDatoAccessorio() As System.Guid
            Get
                Return Me._IDDatoAccessorio
            End Get
            Set
                If ((Me._IDDatoAccessorio = Value) _
                            = False) Then
                    If Me._DatiAccessori.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If
                    Me.OnIDDatoAccessorioChanging(Value)
                    Me.SendPropertyChanging()
                    Me._IDDatoAccessorio = Value
                    Me.SendPropertyChanged("IDDatoAccessorio")
                    Me.OnIDDatoAccessorioChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDPrestazione", DbType:="UniqueIdentifier NOT NULL")>
        Public Property IDPrestazione() As System.Guid
            Get
                Return Me._IDPrestazione
            End Get
            Set
                If ((Me._IDPrestazione = Value) _
                            = False) Then
                    If Me._Prestazioni.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If
                    Me.OnIDPrestazioneChanging(Value)
                    Me.SendPropertyChanging()
                    Me._IDPrestazione = Value
                    Me.SendPropertyChanged("IDPrestazione")
                    Me.OnIDPrestazioneChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Attivo", DbType:="Bit NOT NULL")>
        Public Property Attivo() As Boolean
            Get
                Return Me._Attivo
            End Get
            Set
                If ((Me._Attivo = Value) _
                            = False) Then
                    Me.OnAttivoChanging(Value)
                    Me.SendPropertyChanging()
                    Me._Attivo = Value
                    Me.SendPropertyChanged("Attivo")
                    Me.OnAttivoChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DatiAccessori_DatiAccessoriPrestazioni", Storage:="_DatiAccessori", ThisKey:="IDDatoAccessorio", OtherKey:="Id", IsForeignKey:=True)>
        Public Property DatiAccessori() As DatiAccessori
            Get
                Return Me._DatiAccessori.Entity
            End Get
            Set
                Dim previousValue As DatiAccessori = Me._DatiAccessori.Entity
                If ((Object.Equals(previousValue, Value) = False) _
                            OrElse (Me._DatiAccessori.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()

                    If ((previousValue Is Nothing) _
                                = False) Then
                        Me._DatiAccessori.Entity = Nothing
                        previousValue.DatiAccessoriPrestazioni.Remove(Me)
                    End If
                    Me._DatiAccessori.Entity = Value
                    If ((Value Is Nothing) _
                                = False) Then
                        Value.DatiAccessoriPrestazioni.Add(Me)
                        Me._IDDatoAccessorio = Value.Id
                    Else
                        Me._IDDatoAccessorio = CType(Nothing, System.Guid)
                    End If
                    Me.SendPropertyChanged("DatiAccessori")
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Prestazioni_DatiAccessoriPrestazioni", Storage:="_Prestazioni", ThisKey:="IDPrestazione", OtherKey:="ID", IsForeignKey:=True)>
        Public Property Prestazioni() As Prestazioni
            Get
                Return Me._Prestazioni.Entity
            End Get
            Set
                Dim previousValue As Prestazioni = Me._Prestazioni.Entity
                If ((Object.Equals(previousValue, Value) = False) _
                            OrElse (Me._Prestazioni.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()

                    If ((previousValue Is Nothing) _
                                = False) Then
                        Me._Prestazioni.Entity = Nothing
                        previousValue.DatiAccessoriPrestazioni.Remove(Me)
                    End If
                    Me._Prestazioni.Entity = Value
                    If ((Value Is Nothing) _
                                = False) Then
                        Value.DatiAccessoriPrestazioni.Add(Me)
                        Me._IDPrestazione = Value.ID
                    Else
                        Me._IDPrestazione = CType(Nothing, System.Guid)
                    End If
                    Me.SendPropertyChanged("Prestazioni")
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
                        = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
                        = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class
End Namespace
